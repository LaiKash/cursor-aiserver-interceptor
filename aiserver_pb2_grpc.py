# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import aiserver_pb2 as aiserver__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in aiserver_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AiServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HealthCheck = channel.unary_unary(
                '/aiserver.v1.AiService/HealthCheck',
                request_serializer=aiserver__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=aiserver__pb2.HealthCheckResponse.FromString,
                _registered_method=True)
        self.PrivacyCheck = channel.unary_unary(
                '/aiserver.v1.AiService/PrivacyCheck',
                request_serializer=aiserver__pb2.PrivacyCheckRequest.SerializeToString,
                response_deserializer=aiserver__pb2.PrivacyCheckResponse.FromString,
                _registered_method=True)
        self.TimeLeftHealthCheck = channel.unary_unary(
                '/aiserver.v1.AiService/TimeLeftHealthCheck',
                request_serializer=aiserver__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=aiserver__pb2.TimeLeftHealthCheckResponse.FromString,
                _registered_method=True)
        self.ThrowErrorCheck = channel.unary_unary(
                '/aiserver.v1.AiService/ThrowErrorCheck',
                request_serializer=aiserver__pb2.ThrowErrorCheckRequest.SerializeToString,
                response_deserializer=aiserver__pb2.ThrowErrorCheckResponse.FromString,
                _registered_method=True)
        self.AvailableModels = channel.unary_unary(
                '/aiserver.v1.AiService/AvailableModels',
                request_serializer=aiserver__pb2.AvailableModelsRequest.SerializeToString,
                response_deserializer=aiserver__pb2.AvailableModelsResponse.FromString,
                _registered_method=True)
        self.StreamChatTryReallyHard = channel.unary_stream(
                '/aiserver.v1.AiService/StreamChatTryReallyHard',
                request_serializer=aiserver__pb2.GetChatRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamChatResponse.FromString,
                _registered_method=True)
        self.RerankDocuments = channel.unary_unary(
                '/aiserver.v1.AiService/RerankDocuments',
                request_serializer=aiserver__pb2.RerankDocumentsRequest.SerializeToString,
                response_deserializer=aiserver__pb2.RerankDocumentsResponse.FromString,
                _registered_method=True)
        self.StreamComposer = channel.unary_stream(
                '/aiserver.v1.AiService/StreamComposer',
                request_serializer=aiserver__pb2.GetComposerChatRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamChatResponse.FromString,
                _registered_method=True)
        self.StreamComposerContext = channel.unary_stream(
                '/aiserver.v1.AiService/StreamComposerContext',
                request_serializer=aiserver__pb2.StreamChatContextRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamChatContextResponse.FromString,
                _registered_method=True)
        self.WarmComposerCache = channel.unary_unary(
                '/aiserver.v1.AiService/WarmComposerCache',
                request_serializer=aiserver__pb2.GetComposerChatRequest.SerializeToString,
                response_deserializer=aiserver__pb2.WarmComposerCacheResponse.FromString,
                _registered_method=True)
        self.KeepComposerCacheWarm = channel.unary_unary(
                '/aiserver.v1.AiService/KeepComposerCacheWarm',
                request_serializer=aiserver__pb2.KeepComposerCacheWarmRequest.SerializeToString,
                response_deserializer=aiserver__pb2.KeepComposerCacheWarmResponse.FromString,
                _registered_method=True)
        self.StreamPotentialLocs = channel.unary_stream(
                '/aiserver.v1.AiService/StreamPotentialLocs',
                request_serializer=aiserver__pb2.PotentialLocsRequest.SerializeToString,
                response_deserializer=aiserver__pb2.PotentialLocsResponse.FromString,
                _registered_method=True)
        self.StreamPotentialLocsUnderneath = channel.unary_stream(
                '/aiserver.v1.AiService/StreamPotentialLocsUnderneath',
                request_serializer=aiserver__pb2.PotentialLocsUnderneathRequest.SerializeToString,
                response_deserializer=aiserver__pb2.PotentialLocsUnderneathResponse.FromString,
                _registered_method=True)
        self.StreamPotentialLocsInitialQueries = channel.unary_stream(
                '/aiserver.v1.AiService/StreamPotentialLocsInitialQueries',
                request_serializer=aiserver__pb2.PotentialLocsInitialQueriesRequest.SerializeToString,
                response_deserializer=aiserver__pb2.PotentialLocsInitialQueriesResponse.FromString,
                _registered_method=True)
        self.StreamNotepadChat = channel.unary_stream(
                '/aiserver.v1.AiService/StreamNotepadChat',
                request_serializer=aiserver__pb2.GetNotepadChatRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamChatResponse.FromString,
                _registered_method=True)
        self.GetChatTitle = channel.unary_unary(
                '/aiserver.v1.AiService/GetChatTitle',
                request_serializer=aiserver__pb2.GetChatTitleRequest.SerializeToString,
                response_deserializer=aiserver__pb2.GetChatTitleResponse.FromString,
                _registered_method=True)
        self.GetCompletion = channel.unary_unary(
                '/aiserver.v1.AiService/GetCompletion',
                request_serializer=aiserver__pb2.GetCompletionRequest.SerializeToString,
                response_deserializer=aiserver__pb2.GetCompletionResponse.FromString,
                _registered_method=True)
        self.GetSearch = channel.unary_unary(
                '/aiserver.v1.AiService/GetSearch',
                request_serializer=aiserver__pb2.GetSearchRequest.SerializeToString,
                response_deserializer=aiserver__pb2.GetSearchResponse.FromString,
                _registered_method=True)
        self.StreamInlineEdits = channel.unary_stream(
                '/aiserver.v1.AiService/StreamInlineEdits',
                request_serializer=aiserver__pb2.StreamInlineEditsRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamInlineEditsResponse.FromString,
                _registered_method=True)
        self.SummarizeConversation = channel.unary_unary(
                '/aiserver.v1.AiService/SummarizeConversation',
                request_serializer=aiserver__pb2.GetChatRequest.SerializeToString,
                response_deserializer=aiserver__pb2.SummarizeConversationResponse.FromString,
                _registered_method=True)
        self.IsolatedTreesitter = channel.unary_unary(
                '/aiserver.v1.AiService/IsolatedTreesitter',
                request_serializer=aiserver__pb2.IsolatedTreesitterRequest.SerializeToString,
                response_deserializer=aiserver__pb2.IsolatedTreesitterResponse.FromString,
                _registered_method=True)
        self.GetSimplePrompt = channel.unary_unary(
                '/aiserver.v1.AiService/GetSimplePrompt',
                request_serializer=aiserver__pb2.GetSimplePromptRequest.SerializeToString,
                response_deserializer=aiserver__pb2.GetSimplePromptResponse.FromString,
                _registered_method=True)
        self.CheckLongFilesFit = channel.unary_unary(
                '/aiserver.v1.AiService/CheckLongFilesFit',
                request_serializer=aiserver__pb2.GetChatRequest.SerializeToString,
                response_deserializer=aiserver__pb2.CheckLongFilesFitResponse.FromString,
                _registered_method=True)
        self.GetEvaluationPrompt = channel.unary_unary(
                '/aiserver.v1.AiService/GetEvaluationPrompt',
                request_serializer=aiserver__pb2.GetEvaluationPromptRequest.SerializeToString,
                response_deserializer=aiserver__pb2.GetEvaluationPromptResponse.FromString,
                _registered_method=True)
        self.GetUserInfo = channel.unary_unary(
                '/aiserver.v1.AiService/GetUserInfo',
                request_serializer=aiserver__pb2.GetUserInfoRequest.SerializeToString,
                response_deserializer=aiserver__pb2.GetUserInfoResponse.FromString,
                _registered_method=True)
        self.ClearAndRedoEntireBucket = channel.unary_unary(
                '/aiserver.v1.AiService/ClearAndRedoEntireBucket',
                request_serializer=aiserver__pb2.ClearAndRedoEntireBucketRequest.SerializeToString,
                response_deserializer=aiserver__pb2.ClearAndRedoEntireBucketResponse.FromString,
                _registered_method=True)
        self.StreamBranchGemini = channel.unary_stream(
                '/aiserver.v1.AiService/StreamBranchGemini',
                request_serializer=aiserver__pb2.StreamBranchGeminiRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamBranchGeminiResponse.FromString,
                _registered_method=True)
        self.StreamBranchFileSelections = channel.unary_stream(
                '/aiserver.v1.AiService/StreamBranchFileSelections',
                request_serializer=aiserver__pb2.StreamBranchFileSelectionsRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamBranchFileSelectionsResponse.FromString,
                _registered_method=True)
        self.StreamBackgroundEdit = channel.unary_stream(
                '/aiserver.v1.AiService/StreamBackgroundEdit',
                request_serializer=aiserver__pb2.StreamBackgroundEditRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamChatResponse.FromString,
                _registered_method=True)
        self.StreamGPTFourEdit = channel.unary_stream(
                '/aiserver.v1.AiService/StreamGPTFourEdit',
                request_serializer=aiserver__pb2.StreamGPTFourEditRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamChatResponse.FromString,
                _registered_method=True)
        self.StreamChat = channel.unary_stream(
                '/aiserver.v1.AiService/StreamChat',
                request_serializer=aiserver__pb2.GetChatRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamChatResponse.FromString,
                _registered_method=True)
        self.StreamChatWeb = channel.unary_stream(
                '/aiserver.v1.AiService/StreamChatWeb',
                request_serializer=aiserver__pb2.GetChatRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamChatResponse.FromString,
                _registered_method=True)
        self.WarmChatCache = channel.unary_unary(
                '/aiserver.v1.AiService/WarmChatCache',
                request_serializer=aiserver__pb2.WarmChatCacheRequest.SerializeToString,
                response_deserializer=aiserver__pb2.WarmChatCacheResponse.FromString,
                _registered_method=True)
        self.StreamEdit = channel.unary_stream(
                '/aiserver.v1.AiService/StreamEdit',
                request_serializer=aiserver__pb2.StreamEditRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamChatResponse.FromString,
                _registered_method=True)
        self.PreloadEdit = channel.unary_unary(
                '/aiserver.v1.AiService/PreloadEdit',
                request_serializer=aiserver__pb2.PreloadEditRequest.SerializeToString,
                response_deserializer=aiserver__pb2.PreloadEditResponse.FromString,
                _registered_method=True)
        self.StreamFastEdit = channel.unary_stream(
                '/aiserver.v1.AiService/StreamFastEdit',
                request_serializer=aiserver__pb2.StreamFastEditRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamFastEditResponse.FromString,
                _registered_method=True)
        self.StreamGenerate = channel.unary_stream(
                '/aiserver.v1.AiService/StreamGenerate',
                request_serializer=aiserver__pb2.StreamGenerateRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamChatResponse.FromString,
                _registered_method=True)
        self.StreamInlineLongCompletion = channel.unary_stream(
                '/aiserver.v1.AiService/StreamInlineLongCompletion',
                request_serializer=aiserver__pb2.StreamInlineLongCompletionRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamChatResponse.FromString,
                _registered_method=True)
        self.SlashEdit = channel.unary_stream(
                '/aiserver.v1.AiService/SlashEdit',
                request_serializer=aiserver__pb2.SlashEditRequest.SerializeToString,
                response_deserializer=aiserver__pb2.SlashEditResponse.FromString,
                _registered_method=True)
        self.SlashEditFollowUpWithPreviousEdits = channel.unary_stream(
                '/aiserver.v1.AiService/SlashEditFollowUpWithPreviousEdits',
                request_serializer=aiserver__pb2.SlashEditFollowUpWithPreviousEditsRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamSlashEditFollowUpWithPreviousEditsResponse.FromString,
                _registered_method=True)
        self.StreamAiPreviews = channel.unary_stream(
                '/aiserver.v1.AiService/StreamAiPreviews',
                request_serializer=aiserver__pb2.StreamAiPreviewsRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamAiPreviewsResponse.FromString,
                _registered_method=True)
        self.ShouldTurnOnCppOnboarding = channel.unary_unary(
                '/aiserver.v1.AiService/ShouldTurnOnCppOnboarding',
                request_serializer=aiserver__pb2.ShouldTurnOnCppOnboardingRequest.SerializeToString,
                response_deserializer=aiserver__pb2.ShouldTurnOnCppOnboardingResponse.FromString,
                _registered_method=True)
        self.StreamReview = channel.unary_stream(
                '/aiserver.v1.AiService/StreamReview',
                request_serializer=aiserver__pb2.ReviewRequest.SerializeToString,
                response_deserializer=aiserver__pb2.ReviewResponse.FromString,
                _registered_method=True)
        self.StreamReviewChat = channel.unary_stream(
                '/aiserver.v1.AiService/StreamReviewChat',
                request_serializer=aiserver__pb2.ReviewChatRequest.SerializeToString,
                response_deserializer=aiserver__pb2.ReviewChatResponse.FromString,
                _registered_method=True)
        self.CheckQueuePosition = channel.unary_unary(
                '/aiserver.v1.AiService/CheckQueuePosition',
                request_serializer=aiserver__pb2.CheckQueuePositionRequest.SerializeToString,
                response_deserializer=aiserver__pb2.CheckQueuePositionResponse.FromString,
                _registered_method=True)
        self.CheckUsageBasedPrice = channel.unary_unary(
                '/aiserver.v1.AiService/CheckUsageBasedPrice',
                request_serializer=aiserver__pb2.CheckUsageBasedPriceRequest.SerializeToString,
                response_deserializer=aiserver__pb2.CheckUsageBasedPriceResponse.FromString,
                _registered_method=True)
        self.DoThisForMeCheck = channel.unary_unary(
                '/aiserver.v1.AiService/DoThisForMeCheck',
                request_serializer=aiserver__pb2.DoThisForMeCheckRequest.SerializeToString,
                response_deserializer=aiserver__pb2.DoThisForMeCheckResponse.FromString,
                _registered_method=True)
        self.StreamDoThisForMe = channel.unary_stream(
                '/aiserver.v1.AiService/StreamDoThisForMe',
                request_serializer=aiserver__pb2.DoThisForMeRequest.SerializeToString,
                response_deserializer=aiserver__pb2.DoThisForMeResponseWrapped.FromString,
                _registered_method=True)
        self.StreamChatToolformer = channel.unary_stream(
                '/aiserver.v1.AiService/StreamChatToolformer',
                request_serializer=aiserver__pb2.GetChatRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamChatToolformerResponse.FromString,
                _registered_method=True)
        self.StreamChatToolformerContinue = channel.unary_stream(
                '/aiserver.v1.AiService/StreamChatToolformerContinue',
                request_serializer=aiserver__pb2.StreamChatToolformerContinueRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamChatToolformerResponse.FromString,
                _registered_method=True)
        self.PushAiThought = channel.unary_unary(
                '/aiserver.v1.AiService/PushAiThought',
                request_serializer=aiserver__pb2.PushAiThoughtRequest.SerializeToString,
                response_deserializer=aiserver__pb2.PushAiThoughtResponse.FromString,
                _registered_method=True)
        self.CheckDoableAsTask = channel.unary_unary(
                '/aiserver.v1.AiService/CheckDoableAsTask',
                request_serializer=aiserver__pb2.CheckDoableAsTaskRequest.SerializeToString,
                response_deserializer=aiserver__pb2.CheckDoableAsTaskResponse.FromString,
                _registered_method=True)
        self.ReportGroundTruthCandidate = channel.unary_unary(
                '/aiserver.v1.AiService/ReportGroundTruthCandidate',
                request_serializer=aiserver__pb2.ReportGroundTruthCandidateRequest.SerializeToString,
                response_deserializer=aiserver__pb2.ReportGroundTruthCandidateResponse.FromString,
                _registered_method=True)
        self.ReportCmdKFate = channel.unary_unary(
                '/aiserver.v1.AiService/ReportCmdKFate',
                request_serializer=aiserver__pb2.ReportCmdKFateRequest.SerializeToString,
                response_deserializer=aiserver__pb2.ReportCmdKFateResponse.FromString,
                _registered_method=True)
        self.ShowWelcomeScreen = channel.unary_unary(
                '/aiserver.v1.AiService/ShowWelcomeScreen',
                request_serializer=aiserver__pb2.ShowWelcomeScreenRequest.SerializeToString,
                response_deserializer=aiserver__pb2.ShowWelcomeScreenResponse.FromString,
                _registered_method=True)
        self.InterfaceAgentInit = channel.unary_unary(
                '/aiserver.v1.AiService/InterfaceAgentInit',
                request_serializer=aiserver__pb2.InterfaceAgentInitRequest.SerializeToString,
                response_deserializer=aiserver__pb2.InterfaceAgentInitResponse.FromString,
                _registered_method=True)
        self.StreamInterfaceAgentStatus = channel.unary_stream(
                '/aiserver.v1.AiService/StreamInterfaceAgentStatus',
                request_serializer=aiserver__pb2.StreamInterfaceAgentStatusRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamInterfaceAgentStatusResponse.FromString,
                _registered_method=True)
        self.TaskGetInterfaceAgentStatus = channel.unary_stream(
                '/aiserver.v1.AiService/TaskGetInterfaceAgentStatus',
                request_serializer=aiserver__pb2.TaskGetInterfaceAgentStatusRequest.SerializeToString,
                response_deserializer=aiserver__pb2.TaskGetInterfaceAgentStatusResponseWrapped.FromString,
                _registered_method=True)
        self.TaskInit = channel.unary_unary(
                '/aiserver.v1.AiService/TaskInit',
                request_serializer=aiserver__pb2.TaskInitRequest.SerializeToString,
                response_deserializer=aiserver__pb2.TaskInitResponse.FromString,
                _registered_method=True)
        self.TaskPause = channel.unary_unary(
                '/aiserver.v1.AiService/TaskPause',
                request_serializer=aiserver__pb2.TaskPauseRequest.SerializeToString,
                response_deserializer=aiserver__pb2.TaskPauseResponse.FromString,
                _registered_method=True)
        self.TaskInfo = channel.unary_unary(
                '/aiserver.v1.AiService/TaskInfo',
                request_serializer=aiserver__pb2.TaskInfoRequest.SerializeToString,
                response_deserializer=aiserver__pb2.TaskInfoResponse.FromString,
                _registered_method=True)
        self.TaskStreamLog = channel.unary_stream(
                '/aiserver.v1.AiService/TaskStreamLog',
                request_serializer=aiserver__pb2.TaskStreamLogRequest.SerializeToString,
                response_deserializer=aiserver__pb2.TaskStreamLogResponse.FromString,
                _registered_method=True)
        self.TaskSendMessage = channel.unary_unary(
                '/aiserver.v1.AiService/TaskSendMessage',
                request_serializer=aiserver__pb2.TaskSendMessageRequest.SerializeToString,
                response_deserializer=aiserver__pb2.TaskSendMessageResponse.FromString,
                _registered_method=True)
        self.TaskProvideResult = channel.unary_unary(
                '/aiserver.v1.AiService/TaskProvideResult',
                request_serializer=aiserver__pb2.TaskProvideResultRequest.SerializeToString,
                response_deserializer=aiserver__pb2.TaskProvideResultResponse.FromString,
                _registered_method=True)
        self.CreateExperimentalIndex = channel.unary_unary(
                '/aiserver.v1.AiService/CreateExperimentalIndex',
                request_serializer=aiserver__pb2.CreateExperimentalIndexRequest.SerializeToString,
                response_deserializer=aiserver__pb2.CreateExperimentalIndexResponse.FromString,
                _registered_method=True)
        self.ListExperimentalIndexFiles = channel.unary_unary(
                '/aiserver.v1.AiService/ListExperimentalIndexFiles',
                request_serializer=aiserver__pb2.ListExperimentalIndexFilesRequest.SerializeToString,
                response_deserializer=aiserver__pb2.ListExperimentalIndexFilesResponse.FromString,
                _registered_method=True)
        self.ListenExperimentalIndex = channel.unary_stream(
                '/aiserver.v1.AiService/ListenExperimentalIndex',
                request_serializer=aiserver__pb2.ListenExperimentalIndexRequest.SerializeToString,
                response_deserializer=aiserver__pb2.ListenExperimentalIndexResponse.FromString,
                _registered_method=True)
        self.RegisterFileToIndex = channel.unary_unary(
                '/aiserver.v1.AiService/RegisterFileToIndex',
                request_serializer=aiserver__pb2.RegisterFileToIndexRequest.SerializeToString,
                response_deserializer=aiserver__pb2.RequestReceivedResponse.FromString,
                _registered_method=True)
        self.SetupIndexDependencies = channel.unary_unary(
                '/aiserver.v1.AiService/SetupIndexDependencies',
                request_serializer=aiserver__pb2.SetupIndexDependenciesRequest.SerializeToString,
                response_deserializer=aiserver__pb2.SetupIndexDependenciesResponse.FromString,
                _registered_method=True)
        self.ComputeIndexTopoSort = channel.unary_unary(
                '/aiserver.v1.AiService/ComputeIndexTopoSort',
                request_serializer=aiserver__pb2.ComputeIndexTopoSortRequest.SerializeToString,
                response_deserializer=aiserver__pb2.ComputeIndexTopoSortResponse.FromString,
                _registered_method=True)
        self.StreamChatDeepContext = channel.unary_stream(
                '/aiserver.v1.AiService/StreamChatDeepContext',
                request_serializer=aiserver__pb2.StreamChatDeepContextRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamChatDeepContextResponse.FromString,
                _registered_method=True)
        self.ChooseCodeReferences = channel.unary_unary(
                '/aiserver.v1.AiService/ChooseCodeReferences',
                request_serializer=aiserver__pb2.ChooseCodeReferencesRequest.SerializeToString,
                response_deserializer=aiserver__pb2.RequestReceivedResponse.FromString,
                _registered_method=True)
        self.RegisterCodeReferences = channel.unary_unary(
                '/aiserver.v1.AiService/RegisterCodeReferences',
                request_serializer=aiserver__pb2.RegisterCodeReferencesRequest.SerializeToString,
                response_deserializer=aiserver__pb2.RegisterCodeReferencesResponse.FromString,
                _registered_method=True)
        self.ExtractPaths = channel.unary_unary(
                '/aiserver.v1.AiService/ExtractPaths',
                request_serializer=aiserver__pb2.ExtractPathsRequest.SerializeToString,
                response_deserializer=aiserver__pb2.ExtractPathsResponse.FromString,
                _registered_method=True)
        self.SummarizeWithReferences = channel.unary_unary(
                '/aiserver.v1.AiService/SummarizeWithReferences',
                request_serializer=aiserver__pb2.SummarizeWithReferencesRequest.SerializeToString,
                response_deserializer=aiserver__pb2.RequestReceivedResponse.FromString,
                _registered_method=True)
        self.DocumentationQuery = channel.unary_unary(
                '/aiserver.v1.AiService/DocumentationQuery',
                request_serializer=aiserver__pb2.DocumentationQueryRequest.SerializeToString,
                response_deserializer=aiserver__pb2.DocumentationQueryResponse.FromString,
                _registered_method=True)
        self.AvailableDocs = channel.unary_unary(
                '/aiserver.v1.AiService/AvailableDocs',
                request_serializer=aiserver__pb2.AvailableDocsRequest.SerializeToString,
                response_deserializer=aiserver__pb2.AvailableDocsResponse.FromString,
                _registered_method=True)
        self.ReportFeedback = channel.unary_unary(
                '/aiserver.v1.AiService/ReportFeedback',
                request_serializer=aiserver__pb2.ReportFeedbackRequest.SerializeToString,
                response_deserializer=aiserver__pb2.ReportFeedbackResponse.FromString,
                _registered_method=True)
        self.ReportBug = channel.unary_unary(
                '/aiserver.v1.AiService/ReportBug',
                request_serializer=aiserver__pb2.ReportBugRequest.SerializeToString,
                response_deserializer=aiserver__pb2.ReportBugResponse.FromString,
                _registered_method=True)
        self.StreamChatContext = channel.unary_stream(
                '/aiserver.v1.AiService/StreamChatContext',
                request_serializer=aiserver__pb2.StreamChatContextRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamChatContextResponse.FromString,
                _registered_method=True)
        self.GenerateTldr = channel.unary_unary(
                '/aiserver.v1.AiService/GenerateTldr',
                request_serializer=aiserver__pb2.GenerateTldrRequest.SerializeToString,
                response_deserializer=aiserver__pb2.GenerateTldrResponse.FromString,
                _registered_method=True)
        self.TaskStreamChatContext = channel.unary_stream(
                '/aiserver.v1.AiService/TaskStreamChatContext',
                request_serializer=aiserver__pb2.TaskStreamChatContextRequest.SerializeToString,
                response_deserializer=aiserver__pb2.TaskStreamChatContextResponseWrapped.FromString,
                _registered_method=True)
        self.RerankResults = channel.unary_unary(
                '/aiserver.v1.AiService/RerankResults',
                request_serializer=aiserver__pb2.RerankerRequest.SerializeToString,
                response_deserializer=aiserver__pb2.RerankerResponse.FromString,
                _registered_method=True)
        self.ModelQuery = channel.unary_unary(
                '/aiserver.v1.AiService/ModelQuery',
                request_serializer=aiserver__pb2.ModelQueryRequest.SerializeToString,
                response_deserializer=aiserver__pb2.ModelQueryResponse.FromString,
                _registered_method=True)
        self.ModelQueryV2 = channel.unary_stream(
                '/aiserver.v1.AiService/ModelQueryV2',
                request_serializer=aiserver__pb2.ModelQueryRequest.SerializeToString,
                response_deserializer=aiserver__pb2.ModelQueryResponseV2.FromString,
                _registered_method=True)
        self.IntentPrediction = channel.unary_unary(
                '/aiserver.v1.AiService/IntentPrediction',
                request_serializer=aiserver__pb2.IntentPredictionRequest.SerializeToString,
                response_deserializer=aiserver__pb2.IntentPredictionResponse.FromString,
                _registered_method=True)
        self.StreamCursorTutor = channel.unary_stream(
                '/aiserver.v1.AiService/StreamCursorTutor',
                request_serializer=aiserver__pb2.StreamCursorTutorRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamCursorTutorResponse.FromString,
                _registered_method=True)
        self.CheckFeatureStatus = channel.unary_unary(
                '/aiserver.v1.AiService/CheckFeatureStatus',
                request_serializer=aiserver__pb2.CheckFeatureStatusRequest.SerializeToString,
                response_deserializer=aiserver__pb2.CheckFeatureStatusResponse.FromString,
                _registered_method=True)
        self.GetEffectiveTokenLimit = channel.unary_unary(
                '/aiserver.v1.AiService/GetEffectiveTokenLimit',
                request_serializer=aiserver__pb2.GetEffectiveTokenLimitRequest.SerializeToString,
                response_deserializer=aiserver__pb2.GetEffectiveTokenLimitResponse.FromString,
                _registered_method=True)
        self.GetContextScores = channel.unary_unary(
                '/aiserver.v1.AiService/GetContextScores',
                request_serializer=aiserver__pb2.ContextScoresRequest.SerializeToString,
                response_deserializer=aiserver__pb2.ContextScoresResponse.FromString,
                _registered_method=True)
        self.StreamCpp = channel.unary_stream(
                '/aiserver.v1.AiService/StreamCpp',
                request_serializer=aiserver__pb2.StreamCppRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamCppResponse.FromString,
                _registered_method=True)
        self.CppConfig = channel.unary_unary(
                '/aiserver.v1.AiService/CppConfig',
                request_serializer=aiserver__pb2.CppConfigRequest.SerializeToString,
                response_deserializer=aiserver__pb2.CppConfigResponse.FromString,
                _registered_method=True)
        self.CppEditHistoryStatus = channel.unary_unary(
                '/aiserver.v1.AiService/CppEditHistoryStatus',
                request_serializer=aiserver__pb2.CppEditHistoryStatusRequest.SerializeToString,
                response_deserializer=aiserver__pb2.CppEditHistoryStatusResponse.FromString,
                _registered_method=True)
        self.CppAppend = channel.unary_unary(
                '/aiserver.v1.AiService/CppAppend',
                request_serializer=aiserver__pb2.CppAppendRequest.SerializeToString,
                response_deserializer=aiserver__pb2.CppAppendResponse.FromString,
                _registered_method=True)
        self.CheckNumberConfig = channel.unary_unary(
                '/aiserver.v1.AiService/CheckNumberConfig',
                request_serializer=aiserver__pb2.CheckNumberConfigRequest.SerializeToString,
                response_deserializer=aiserver__pb2.CheckNumberConfigResponse.FromString,
                _registered_method=True)
        self.StreamTerminalAutocomplete = channel.unary_stream(
                '/aiserver.v1.AiService/StreamTerminalAutocomplete',
                request_serializer=aiserver__pb2.StreamTerminalAutocompleteRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamTerminalAutocompleteResponse.FromString,
                _registered_method=True)
        self.StreamPseudocodeGenerator = channel.unary_stream(
                '/aiserver.v1.AiService/StreamPseudocodeGenerator',
                request_serializer=aiserver__pb2.StreamPseudocodeGeneratorRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamPseudocodeGeneratorResponse.FromString,
                _registered_method=True)
        self.StreamPseudocodeMapper = channel.unary_stream(
                '/aiserver.v1.AiService/StreamPseudocodeMapper',
                request_serializer=aiserver__pb2.StreamPseudocodeMapperRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamPseudocodeMapperResponse.FromString,
                _registered_method=True)
        self.StreamAiLintBug = channel.unary_stream(
                '/aiserver.v1.AiService/StreamAiLintBug',
                request_serializer=aiserver__pb2.StreamAiLintBugRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamAiLintBugResponse.FromString,
                _registered_method=True)
        self.StreamAiCursorHelp = channel.unary_stream(
                '/aiserver.v1.AiService/StreamAiCursorHelp',
                request_serializer=aiserver__pb2.StreamAiCursorHelpRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamAiCursorHelpResponse.FromString,
                _registered_method=True)
        self.LogUserLintReply = channel.unary_unary(
                '/aiserver.v1.AiService/LogUserLintReply',
                request_serializer=aiserver__pb2.LogUserLintReplyRequest.SerializeToString,
                response_deserializer=aiserver__pb2.LogUserLintReplyResponse.FromString,
                _registered_method=True)
        self.LogLinterExplicitUserFeedback = channel.unary_unary(
                '/aiserver.v1.AiService/LogLinterExplicitUserFeedback',
                request_serializer=aiserver__pb2.LogLinterExplicitUserFeedbackRequest.SerializeToString,
                response_deserializer=aiserver__pb2.LogLinterExplicitUserFeedbackResponse.FromString,
                _registered_method=True)
        self.StreamFixMarkers = channel.unary_stream(
                '/aiserver.v1.AiService/StreamFixMarkers',
                request_serializer=aiserver__pb2.FixMarkersRequest.SerializeToString,
                response_deserializer=aiserver__pb2.FixMarkersResponse.FromString,
                _registered_method=True)
        self.ReportInlineAction = channel.unary_unary(
                '/aiserver.v1.AiService/ReportInlineAction',
                request_serializer=aiserver__pb2.ReportInlineActionRequest.SerializeToString,
                response_deserializer=aiserver__pb2.ReportInlineActionResponse.FromString,
                _registered_method=True)
        self.StreamPriomptPrompt = channel.unary_stream(
                '/aiserver.v1.AiService/StreamPriomptPrompt',
                request_serializer=aiserver__pb2.StreamPriomptPromptRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamPriomptPromptResponse.FromString,
                _registered_method=True)
        self.StreamLint = channel.unary_stream(
                '/aiserver.v1.AiService/StreamLint',
                request_serializer=aiserver__pb2.StreamLintRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamChatResponse.FromString,
                _registered_method=True)
        self.StreamNewLintRule = channel.unary_stream(
                '/aiserver.v1.AiService/StreamNewLintRule',
                request_serializer=aiserver__pb2.StreamNewRuleRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamChatResponse.FromString,
                _registered_method=True)
        self.AiProject = channel.unary_stream(
                '/aiserver.v1.AiService/AiProject',
                request_serializer=aiserver__pb2.AiProjectRequest.SerializeToString,
                response_deserializer=aiserver__pb2.AiProjectResponse.FromString,
                _registered_method=True)
        self.ToCamelCase = channel.unary_unary(
                '/aiserver.v1.AiService/ToCamelCase',
                request_serializer=aiserver__pb2.ToCamelCaseRequest.SerializeToString,
                response_deserializer=aiserver__pb2.ToCamelCaseResponse.FromString,
                _registered_method=True)
        self.ReportGenerationFeedback = channel.unary_unary(
                '/aiserver.v1.AiService/ReportGenerationFeedback',
                request_serializer=aiserver__pb2.ReportGenerationFeedbackRequest.SerializeToString,
                response_deserializer=aiserver__pb2.ReportGenerationFeedbackResponse.FromString,
                _registered_method=True)
        self.GetThoughtAnnotation = channel.unary_unary(
                '/aiserver.v1.AiService/GetThoughtAnnotation',
                request_serializer=aiserver__pb2.GetThoughtAnnotationRequest.SerializeToString,
                response_deserializer=aiserver__pb2.GetThoughtAnnotationResponse.FromString,
                _registered_method=True)
        self.StreamWebCmdKV1 = channel.unary_stream(
                '/aiserver.v1.AiService/StreamWebCmdKV1',
                request_serializer=aiserver__pb2.StreamWebCmdKV1Request.SerializeToString,
                response_deserializer=aiserver__pb2.StreamWebCmdKV1Response.FromString,
                _registered_method=True)
        self.StreamNextCursorPrediction = channel.unary_stream(
                '/aiserver.v1.AiService/StreamNextCursorPrediction',
                request_serializer=aiserver__pb2.StreamNextCursorPredictionRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamNextCursorPredictionResponse.FromString,
                _registered_method=True)
        self.IsCursorPredictionEnabled = channel.unary_unary(
                '/aiserver.v1.AiService/IsCursorPredictionEnabled',
                request_serializer=aiserver__pb2.IsCursorPredictionEnabledRequest.SerializeToString,
                response_deserializer=aiserver__pb2.IsCursorPredictionEnabledResponse.FromString,
                _registered_method=True)
        self.GetCppEditClassification = channel.unary_unary(
                '/aiserver.v1.AiService/GetCppEditClassification',
                request_serializer=aiserver__pb2.GetCppEditClassificationRequest.SerializeToString,
                response_deserializer=aiserver__pb2.GetCppEditClassificationResponse.FromString,
                _registered_method=True)
        self.GetTerminalCompletion = channel.unary_unary(
                '/aiserver.v1.AiService/GetTerminalCompletion',
                request_serializer=aiserver__pb2.GetTerminalCompletionRequest.SerializeToString,
                response_deserializer=aiserver__pb2.GetTerminalCompletionResponse.FromString,
                _registered_method=True)
        self.TakeNotesOnCommitDiff = channel.unary_unary(
                '/aiserver.v1.AiService/TakeNotesOnCommitDiff',
                request_serializer=aiserver__pb2.TakeNotesOnCommitDiffRequest.SerializeToString,
                response_deserializer=aiserver__pb2.TakeNotesOnCommitDiffResponse.FromString,
                _registered_method=True)
        self.BulkEmbed = channel.unary_unary(
                '/aiserver.v1.AiService/BulkEmbed',
                request_serializer=aiserver__pb2.BulkEmbedRequest.SerializeToString,
                response_deserializer=aiserver__pb2.BulkEmbedResponse.FromString,
                _registered_method=True)
        self.ContinueChatRequestWithCommits = channel.unary_unary(
                '/aiserver.v1.AiService/ContinueChatRequestWithCommits',
                request_serializer=aiserver__pb2.ContinueChatRequestWithCommitsRequest.SerializeToString,
                response_deserializer=aiserver__pb2.EmptyResponse.FromString,
                _registered_method=True)
        self.BackgroundCmdKEval = channel.unary_stream(
                '/aiserver.v1.AiService/BackgroundCmdKEval',
                request_serializer=aiserver__pb2.BackgroundCmdKEvalRequest.SerializeToString,
                response_deserializer=aiserver__pb2.BackgroundCmdKEvalResponse.FromString,
                _registered_method=True)
        self.BackgroundCmdK = channel.unary_stream(
                '/aiserver.v1.AiService/BackgroundCmdK',
                request_serializer=aiserver__pb2.BackgroundCmdKRequest.SerializeToString,
                response_deserializer=aiserver__pb2.BackgroundCmdKResponse.FromString,
                _registered_method=True)
        self.StreamCursorMotion = channel.unary_stream(
                '/aiserver.v1.AiService/StreamCursorMotion',
                request_serializer=aiserver__pb2.StreamCursorMotionRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamCursorMotionResponse.FromString,
                _registered_method=True)
        self.CalculateAutoSelection = channel.unary_unary(
                '/aiserver.v1.AiService/CalculateAutoSelection',
                request_serializer=aiserver__pb2.CalculateAutoSelectionRequest.SerializeToString,
                response_deserializer=aiserver__pb2.CalculateAutoSelectionResponse.FromString,
                _registered_method=True)
        self.GetAtSymbolSuggestions = channel.unary_unary(
                '/aiserver.v1.AiService/GetAtSymbolSuggestions',
                request_serializer=aiserver__pb2.GetAtSymbolSuggestionsRequest.SerializeToString,
                response_deserializer=aiserver__pb2.GetAtSymbolSuggestionsResponse.FromString,
                _registered_method=True)
        self.GetCodebaseQuestions = channel.unary_unary(
                '/aiserver.v1.AiService/GetCodebaseQuestions',
                request_serializer=aiserver__pb2.GetChatRequest.SerializeToString,
                response_deserializer=aiserver__pb2.GetCodebaseQuestionsResponse.FromString,
                _registered_method=True)
        self.GetRankedContextFromContextBank = channel.unary_stream(
                '/aiserver.v1.AiService/GetRankedContextFromContextBank',
                request_serializer=aiserver__pb2.GetRankedContextFromContextBankRequest.SerializeToString,
                response_deserializer=aiserver__pb2.GetRankedContextFromContextBankResponse.FromString,
                _registered_method=True)
        self.CppEditHistoryAppend = channel.unary_unary(
                '/aiserver.v1.AiService/CppEditHistoryAppend',
                request_serializer=aiserver__pb2.EditHistoryAppendChangesRequest.SerializeToString,
                response_deserializer=aiserver__pb2.EditHistoryAppendChangesResponse.FromString,
                _registered_method=True)
        self.DevOnlyGetPastRequestIds = channel.unary_unary(
                '/aiserver.v1.AiService/DevOnlyGetPastRequestIds',
                request_serializer=aiserver__pb2.DevOnlyGetPastRequestIdsRequest.SerializeToString,
                response_deserializer=aiserver__pb2.DevOnlyGetPastRequestIdsResponse.FromString,
                _registered_method=True)
        self.GetFilesForComposer = channel.unary_unary(
                '/aiserver.v1.AiService/GetFilesForComposer',
                request_serializer=aiserver__pb2.GetFilesForComposerRequest.SerializeToString,
                response_deserializer=aiserver__pb2.GetFilesForComposerResponse.FromString,
                _registered_method=True)
        self.TryParseTypeScriptTreeSitter = channel.unary_unary(
                '/aiserver.v1.AiService/TryParseTypeScriptTreeSitter',
                request_serializer=aiserver__pb2.TryParseTypeScriptTreeSitterRequest.SerializeToString,
                response_deserializer=aiserver__pb2.TryParseTypeScriptTreeSitterResponse.FromString,
                _registered_method=True)
        self.NameTab = channel.unary_unary(
                '/aiserver.v1.AiService/NameTab',
                request_serializer=aiserver__pb2.NameTabRequest.SerializeToString,
                response_deserializer=aiserver__pb2.NameTabResponse.FromString,
                _registered_method=True)
        self.IsTerminalFinished = channel.unary_unary(
                '/aiserver.v1.AiService/IsTerminalFinished',
                request_serializer=aiserver__pb2.IsTerminalFinishedRequest.SerializeToString,
                response_deserializer=aiserver__pb2.IsTerminalFinishedResponse.FromString,
                _registered_method=True)
        self.TestModelStatus = channel.unary_unary(
                '/aiserver.v1.AiService/TestModelStatus',
                request_serializer=aiserver__pb2.TestModelStatusRequest.SerializeToString,
                response_deserializer=aiserver__pb2.TestModelStatusResponse.FromString,
                _registered_method=True)
        self.FindBugs = channel.unary_unary(
                '/aiserver.v1.AiService/FindBugs',
                request_serializer=aiserver__pb2.FindBugsRequest.SerializeToString,
                response_deserializer=aiserver__pb2.FindBugsResponse.FromString,
                _registered_method=True)
        self.ContextReranking = channel.unary_unary(
                '/aiserver.v1.AiService/ContextReranking',
                request_serializer=aiserver__pb2.ContextRerankingRequest.SerializeToString,
                response_deserializer=aiserver__pb2.ContextRerankingResponse.FromString,
                _registered_method=True)
        self.AutoContext = channel.unary_unary(
                '/aiserver.v1.AiService/AutoContext',
                request_serializer=aiserver__pb2.AutoContextRequest.SerializeToString,
                response_deserializer=aiserver__pb2.AutoContextResponse.FromString,
                _registered_method=True)
        self.WriteGitCommitMessage = channel.unary_unary(
                '/aiserver.v1.AiService/WriteGitCommitMessage',
                request_serializer=aiserver__pb2.WriteGitCommitMessageRequest.SerializeToString,
                response_deserializer=aiserver__pb2.WriteGitCommitMessageResponse.FromString,
                _registered_method=True)
        self.StreamBugBot = channel.unary_stream(
                '/aiserver.v1.AiService/StreamBugBot',
                request_serializer=aiserver__pb2.StreamBugBotRequest.SerializeToString,
                response_deserializer=aiserver__pb2.StreamBugBotResponse.FromString,
                _registered_method=True)
        self.CheckBugBotPrice = channel.unary_unary(
                '/aiserver.v1.AiService/CheckBugBotPrice',
                request_serializer=aiserver__pb2.CheckBugBotPriceRequest.SerializeToString,
                response_deserializer=aiserver__pb2.CheckBugBotPriceResponse.FromString,
                _registered_method=True)
        self.CheckBugBotTelemetryHealthy = channel.unary_unary(
                '/aiserver.v1.AiService/CheckBugBotTelemetryHealthy',
                request_serializer=aiserver__pb2.CheckBugBotTelemetryHealthyRequest.SerializeToString,
                response_deserializer=aiserver__pb2.CheckBugBotTelemetryHealthyResponse.FromString,
                _registered_method=True)
        self.GetSuggestedBugBotIterations = channel.unary_unary(
                '/aiserver.v1.AiService/GetSuggestedBugBotIterations',
                request_serializer=aiserver__pb2.GetSuggestedBugBotIterationsRequest.SerializeToString,
                response_deserializer=aiserver__pb2.GetSuggestedBugBotIterationsResponse.FromString,
                _registered_method=True)
        self.TestBidi = channel.unary_unary(
                '/aiserver.v1.AiService/TestBidi',
                request_serializer=aiserver__pb2.TestBidiRequest.SerializeToString,
                response_deserializer=aiserver__pb2.TestBidiResponse.FromString,
                _registered_method=True)


class AiServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def HealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PrivacyCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TimeLeftHealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ThrowErrorCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AvailableModels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamChatTryReallyHard(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RerankDocuments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamComposer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamComposerContext(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WarmComposerCache(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KeepComposerCacheWarm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamPotentialLocs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamPotentialLocsUnderneath(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamPotentialLocsInitialQueries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamNotepadChat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChatTitle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompletion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSearch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamInlineEdits(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SummarizeConversation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsolatedTreesitter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSimplePrompt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckLongFilesFit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEvaluationPrompt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearAndRedoEntireBucket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamBranchGemini(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamBranchFileSelections(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamBackgroundEdit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamGPTFourEdit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamChat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamChatWeb(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WarmChatCache(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamEdit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PreloadEdit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamFastEdit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamGenerate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamInlineLongCompletion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SlashEdit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SlashEditFollowUpWithPreviousEdits(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamAiPreviews(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShouldTurnOnCppOnboarding(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamReview(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamReviewChat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckQueuePosition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckUsageBasedPrice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DoThisForMeCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamDoThisForMe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamChatToolformer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamChatToolformerContinue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushAiThought(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckDoableAsTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportGroundTruthCandidate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportCmdKFate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShowWelcomeScreen(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InterfaceAgentInit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamInterfaceAgentStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TaskGetInterfaceAgentStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TaskInit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TaskPause(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TaskInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TaskStreamLog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TaskSendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TaskProvideResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateExperimentalIndex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListExperimentalIndexFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListenExperimentalIndex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterFileToIndex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetupIndexDependencies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ComputeIndexTopoSort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamChatDeepContext(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChooseCodeReferences(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterCodeReferences(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExtractPaths(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SummarizeWithReferences(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DocumentationQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AvailableDocs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportFeedback(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportBug(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamChatContext(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateTldr(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TaskStreamChatContext(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RerankResults(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModelQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModelQueryV2(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IntentPrediction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamCursorTutor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckFeatureStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEffectiveTokenLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetContextScores(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamCpp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CppConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CppEditHistoryStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CppAppend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckNumberConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamTerminalAutocomplete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamPseudocodeGenerator(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamPseudocodeMapper(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamAiLintBug(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamAiCursorHelp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogUserLintReply(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogLinterExplicitUserFeedback(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamFixMarkers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportInlineAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamPriomptPrompt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamLint(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamNewLintRule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AiProject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ToCamelCase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportGenerationFeedback(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetThoughtAnnotation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamWebCmdKV1(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamNextCursorPrediction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsCursorPredictionEnabled(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCppEditClassification(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTerminalCompletion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TakeNotesOnCommitDiff(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BulkEmbed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContinueChatRequestWithCommits(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BackgroundCmdKEval(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BackgroundCmdK(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamCursorMotion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalculateAutoSelection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAtSymbolSuggestions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCodebaseQuestions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRankedContextFromContextBank(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CppEditHistoryAppend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DevOnlyGetPastRequestIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFilesForComposer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TryParseTypeScriptTreeSitter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NameTab(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsTerminalFinished(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestModelStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindBugs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContextReranking(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AutoContext(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteGitCommitMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamBugBot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckBugBotPrice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckBugBotTelemetryHealthy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSuggestedBugBotIterations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestBidi(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AiServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=aiserver__pb2.HealthCheckRequest.FromString,
                    response_serializer=aiserver__pb2.HealthCheckResponse.SerializeToString,
            ),
            'PrivacyCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.PrivacyCheck,
                    request_deserializer=aiserver__pb2.PrivacyCheckRequest.FromString,
                    response_serializer=aiserver__pb2.PrivacyCheckResponse.SerializeToString,
            ),
            'TimeLeftHealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.TimeLeftHealthCheck,
                    request_deserializer=aiserver__pb2.HealthCheckRequest.FromString,
                    response_serializer=aiserver__pb2.TimeLeftHealthCheckResponse.SerializeToString,
            ),
            'ThrowErrorCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.ThrowErrorCheck,
                    request_deserializer=aiserver__pb2.ThrowErrorCheckRequest.FromString,
                    response_serializer=aiserver__pb2.ThrowErrorCheckResponse.SerializeToString,
            ),
            'AvailableModels': grpc.unary_unary_rpc_method_handler(
                    servicer.AvailableModels,
                    request_deserializer=aiserver__pb2.AvailableModelsRequest.FromString,
                    response_serializer=aiserver__pb2.AvailableModelsResponse.SerializeToString,
            ),
            'StreamChatTryReallyHard': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamChatTryReallyHard,
                    request_deserializer=aiserver__pb2.GetChatRequest.FromString,
                    response_serializer=aiserver__pb2.StreamChatResponse.SerializeToString,
            ),
            'RerankDocuments': grpc.unary_unary_rpc_method_handler(
                    servicer.RerankDocuments,
                    request_deserializer=aiserver__pb2.RerankDocumentsRequest.FromString,
                    response_serializer=aiserver__pb2.RerankDocumentsResponse.SerializeToString,
            ),
            'StreamComposer': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamComposer,
                    request_deserializer=aiserver__pb2.GetComposerChatRequest.FromString,
                    response_serializer=aiserver__pb2.StreamChatResponse.SerializeToString,
            ),
            'StreamComposerContext': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamComposerContext,
                    request_deserializer=aiserver__pb2.StreamChatContextRequest.FromString,
                    response_serializer=aiserver__pb2.StreamChatContextResponse.SerializeToString,
            ),
            'WarmComposerCache': grpc.unary_unary_rpc_method_handler(
                    servicer.WarmComposerCache,
                    request_deserializer=aiserver__pb2.GetComposerChatRequest.FromString,
                    response_serializer=aiserver__pb2.WarmComposerCacheResponse.SerializeToString,
            ),
            'KeepComposerCacheWarm': grpc.unary_unary_rpc_method_handler(
                    servicer.KeepComposerCacheWarm,
                    request_deserializer=aiserver__pb2.KeepComposerCacheWarmRequest.FromString,
                    response_serializer=aiserver__pb2.KeepComposerCacheWarmResponse.SerializeToString,
            ),
            'StreamPotentialLocs': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamPotentialLocs,
                    request_deserializer=aiserver__pb2.PotentialLocsRequest.FromString,
                    response_serializer=aiserver__pb2.PotentialLocsResponse.SerializeToString,
            ),
            'StreamPotentialLocsUnderneath': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamPotentialLocsUnderneath,
                    request_deserializer=aiserver__pb2.PotentialLocsUnderneathRequest.FromString,
                    response_serializer=aiserver__pb2.PotentialLocsUnderneathResponse.SerializeToString,
            ),
            'StreamPotentialLocsInitialQueries': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamPotentialLocsInitialQueries,
                    request_deserializer=aiserver__pb2.PotentialLocsInitialQueriesRequest.FromString,
                    response_serializer=aiserver__pb2.PotentialLocsInitialQueriesResponse.SerializeToString,
            ),
            'StreamNotepadChat': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamNotepadChat,
                    request_deserializer=aiserver__pb2.GetNotepadChatRequest.FromString,
                    response_serializer=aiserver__pb2.StreamChatResponse.SerializeToString,
            ),
            'GetChatTitle': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChatTitle,
                    request_deserializer=aiserver__pb2.GetChatTitleRequest.FromString,
                    response_serializer=aiserver__pb2.GetChatTitleResponse.SerializeToString,
            ),
            'GetCompletion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCompletion,
                    request_deserializer=aiserver__pb2.GetCompletionRequest.FromString,
                    response_serializer=aiserver__pb2.GetCompletionResponse.SerializeToString,
            ),
            'GetSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSearch,
                    request_deserializer=aiserver__pb2.GetSearchRequest.FromString,
                    response_serializer=aiserver__pb2.GetSearchResponse.SerializeToString,
            ),
            'StreamInlineEdits': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamInlineEdits,
                    request_deserializer=aiserver__pb2.StreamInlineEditsRequest.FromString,
                    response_serializer=aiserver__pb2.StreamInlineEditsResponse.SerializeToString,
            ),
            'SummarizeConversation': grpc.unary_unary_rpc_method_handler(
                    servicer.SummarizeConversation,
                    request_deserializer=aiserver__pb2.GetChatRequest.FromString,
                    response_serializer=aiserver__pb2.SummarizeConversationResponse.SerializeToString,
            ),
            'IsolatedTreesitter': grpc.unary_unary_rpc_method_handler(
                    servicer.IsolatedTreesitter,
                    request_deserializer=aiserver__pb2.IsolatedTreesitterRequest.FromString,
                    response_serializer=aiserver__pb2.IsolatedTreesitterResponse.SerializeToString,
            ),
            'GetSimplePrompt': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSimplePrompt,
                    request_deserializer=aiserver__pb2.GetSimplePromptRequest.FromString,
                    response_serializer=aiserver__pb2.GetSimplePromptResponse.SerializeToString,
            ),
            'CheckLongFilesFit': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckLongFilesFit,
                    request_deserializer=aiserver__pb2.GetChatRequest.FromString,
                    response_serializer=aiserver__pb2.CheckLongFilesFitResponse.SerializeToString,
            ),
            'GetEvaluationPrompt': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEvaluationPrompt,
                    request_deserializer=aiserver__pb2.GetEvaluationPromptRequest.FromString,
                    response_serializer=aiserver__pb2.GetEvaluationPromptResponse.SerializeToString,
            ),
            'GetUserInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserInfo,
                    request_deserializer=aiserver__pb2.GetUserInfoRequest.FromString,
                    response_serializer=aiserver__pb2.GetUserInfoResponse.SerializeToString,
            ),
            'ClearAndRedoEntireBucket': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearAndRedoEntireBucket,
                    request_deserializer=aiserver__pb2.ClearAndRedoEntireBucketRequest.FromString,
                    response_serializer=aiserver__pb2.ClearAndRedoEntireBucketResponse.SerializeToString,
            ),
            'StreamBranchGemini': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamBranchGemini,
                    request_deserializer=aiserver__pb2.StreamBranchGeminiRequest.FromString,
                    response_serializer=aiserver__pb2.StreamBranchGeminiResponse.SerializeToString,
            ),
            'StreamBranchFileSelections': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamBranchFileSelections,
                    request_deserializer=aiserver__pb2.StreamBranchFileSelectionsRequest.FromString,
                    response_serializer=aiserver__pb2.StreamBranchFileSelectionsResponse.SerializeToString,
            ),
            'StreamBackgroundEdit': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamBackgroundEdit,
                    request_deserializer=aiserver__pb2.StreamBackgroundEditRequest.FromString,
                    response_serializer=aiserver__pb2.StreamChatResponse.SerializeToString,
            ),
            'StreamGPTFourEdit': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamGPTFourEdit,
                    request_deserializer=aiserver__pb2.StreamGPTFourEditRequest.FromString,
                    response_serializer=aiserver__pb2.StreamChatResponse.SerializeToString,
            ),
            'StreamChat': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamChat,
                    request_deserializer=aiserver__pb2.GetChatRequest.FromString,
                    response_serializer=aiserver__pb2.StreamChatResponse.SerializeToString,
            ),
            'StreamChatWeb': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamChatWeb,
                    request_deserializer=aiserver__pb2.GetChatRequest.FromString,
                    response_serializer=aiserver__pb2.StreamChatResponse.SerializeToString,
            ),
            'WarmChatCache': grpc.unary_unary_rpc_method_handler(
                    servicer.WarmChatCache,
                    request_deserializer=aiserver__pb2.WarmChatCacheRequest.FromString,
                    response_serializer=aiserver__pb2.WarmChatCacheResponse.SerializeToString,
            ),
            'StreamEdit': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamEdit,
                    request_deserializer=aiserver__pb2.StreamEditRequest.FromString,
                    response_serializer=aiserver__pb2.StreamChatResponse.SerializeToString,
            ),
            'PreloadEdit': grpc.unary_unary_rpc_method_handler(
                    servicer.PreloadEdit,
                    request_deserializer=aiserver__pb2.PreloadEditRequest.FromString,
                    response_serializer=aiserver__pb2.PreloadEditResponse.SerializeToString,
            ),
            'StreamFastEdit': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamFastEdit,
                    request_deserializer=aiserver__pb2.StreamFastEditRequest.FromString,
                    response_serializer=aiserver__pb2.StreamFastEditResponse.SerializeToString,
            ),
            'StreamGenerate': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamGenerate,
                    request_deserializer=aiserver__pb2.StreamGenerateRequest.FromString,
                    response_serializer=aiserver__pb2.StreamChatResponse.SerializeToString,
            ),
            'StreamInlineLongCompletion': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamInlineLongCompletion,
                    request_deserializer=aiserver__pb2.StreamInlineLongCompletionRequest.FromString,
                    response_serializer=aiserver__pb2.StreamChatResponse.SerializeToString,
            ),
            'SlashEdit': grpc.unary_stream_rpc_method_handler(
                    servicer.SlashEdit,
                    request_deserializer=aiserver__pb2.SlashEditRequest.FromString,
                    response_serializer=aiserver__pb2.SlashEditResponse.SerializeToString,
            ),
            'SlashEditFollowUpWithPreviousEdits': grpc.unary_stream_rpc_method_handler(
                    servicer.SlashEditFollowUpWithPreviousEdits,
                    request_deserializer=aiserver__pb2.SlashEditFollowUpWithPreviousEditsRequest.FromString,
                    response_serializer=aiserver__pb2.StreamSlashEditFollowUpWithPreviousEditsResponse.SerializeToString,
            ),
            'StreamAiPreviews': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamAiPreviews,
                    request_deserializer=aiserver__pb2.StreamAiPreviewsRequest.FromString,
                    response_serializer=aiserver__pb2.StreamAiPreviewsResponse.SerializeToString,
            ),
            'ShouldTurnOnCppOnboarding': grpc.unary_unary_rpc_method_handler(
                    servicer.ShouldTurnOnCppOnboarding,
                    request_deserializer=aiserver__pb2.ShouldTurnOnCppOnboardingRequest.FromString,
                    response_serializer=aiserver__pb2.ShouldTurnOnCppOnboardingResponse.SerializeToString,
            ),
            'StreamReview': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamReview,
                    request_deserializer=aiserver__pb2.ReviewRequest.FromString,
                    response_serializer=aiserver__pb2.ReviewResponse.SerializeToString,
            ),
            'StreamReviewChat': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamReviewChat,
                    request_deserializer=aiserver__pb2.ReviewChatRequest.FromString,
                    response_serializer=aiserver__pb2.ReviewChatResponse.SerializeToString,
            ),
            'CheckQueuePosition': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckQueuePosition,
                    request_deserializer=aiserver__pb2.CheckQueuePositionRequest.FromString,
                    response_serializer=aiserver__pb2.CheckQueuePositionResponse.SerializeToString,
            ),
            'CheckUsageBasedPrice': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckUsageBasedPrice,
                    request_deserializer=aiserver__pb2.CheckUsageBasedPriceRequest.FromString,
                    response_serializer=aiserver__pb2.CheckUsageBasedPriceResponse.SerializeToString,
            ),
            'DoThisForMeCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.DoThisForMeCheck,
                    request_deserializer=aiserver__pb2.DoThisForMeCheckRequest.FromString,
                    response_serializer=aiserver__pb2.DoThisForMeCheckResponse.SerializeToString,
            ),
            'StreamDoThisForMe': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamDoThisForMe,
                    request_deserializer=aiserver__pb2.DoThisForMeRequest.FromString,
                    response_serializer=aiserver__pb2.DoThisForMeResponseWrapped.SerializeToString,
            ),
            'StreamChatToolformer': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamChatToolformer,
                    request_deserializer=aiserver__pb2.GetChatRequest.FromString,
                    response_serializer=aiserver__pb2.StreamChatToolformerResponse.SerializeToString,
            ),
            'StreamChatToolformerContinue': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamChatToolformerContinue,
                    request_deserializer=aiserver__pb2.StreamChatToolformerContinueRequest.FromString,
                    response_serializer=aiserver__pb2.StreamChatToolformerResponse.SerializeToString,
            ),
            'PushAiThought': grpc.unary_unary_rpc_method_handler(
                    servicer.PushAiThought,
                    request_deserializer=aiserver__pb2.PushAiThoughtRequest.FromString,
                    response_serializer=aiserver__pb2.PushAiThoughtResponse.SerializeToString,
            ),
            'CheckDoableAsTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckDoableAsTask,
                    request_deserializer=aiserver__pb2.CheckDoableAsTaskRequest.FromString,
                    response_serializer=aiserver__pb2.CheckDoableAsTaskResponse.SerializeToString,
            ),
            'ReportGroundTruthCandidate': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportGroundTruthCandidate,
                    request_deserializer=aiserver__pb2.ReportGroundTruthCandidateRequest.FromString,
                    response_serializer=aiserver__pb2.ReportGroundTruthCandidateResponse.SerializeToString,
            ),
            'ReportCmdKFate': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportCmdKFate,
                    request_deserializer=aiserver__pb2.ReportCmdKFateRequest.FromString,
                    response_serializer=aiserver__pb2.ReportCmdKFateResponse.SerializeToString,
            ),
            'ShowWelcomeScreen': grpc.unary_unary_rpc_method_handler(
                    servicer.ShowWelcomeScreen,
                    request_deserializer=aiserver__pb2.ShowWelcomeScreenRequest.FromString,
                    response_serializer=aiserver__pb2.ShowWelcomeScreenResponse.SerializeToString,
            ),
            'InterfaceAgentInit': grpc.unary_unary_rpc_method_handler(
                    servicer.InterfaceAgentInit,
                    request_deserializer=aiserver__pb2.InterfaceAgentInitRequest.FromString,
                    response_serializer=aiserver__pb2.InterfaceAgentInitResponse.SerializeToString,
            ),
            'StreamInterfaceAgentStatus': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamInterfaceAgentStatus,
                    request_deserializer=aiserver__pb2.StreamInterfaceAgentStatusRequest.FromString,
                    response_serializer=aiserver__pb2.StreamInterfaceAgentStatusResponse.SerializeToString,
            ),
            'TaskGetInterfaceAgentStatus': grpc.unary_stream_rpc_method_handler(
                    servicer.TaskGetInterfaceAgentStatus,
                    request_deserializer=aiserver__pb2.TaskGetInterfaceAgentStatusRequest.FromString,
                    response_serializer=aiserver__pb2.TaskGetInterfaceAgentStatusResponseWrapped.SerializeToString,
            ),
            'TaskInit': grpc.unary_unary_rpc_method_handler(
                    servicer.TaskInit,
                    request_deserializer=aiserver__pb2.TaskInitRequest.FromString,
                    response_serializer=aiserver__pb2.TaskInitResponse.SerializeToString,
            ),
            'TaskPause': grpc.unary_unary_rpc_method_handler(
                    servicer.TaskPause,
                    request_deserializer=aiserver__pb2.TaskPauseRequest.FromString,
                    response_serializer=aiserver__pb2.TaskPauseResponse.SerializeToString,
            ),
            'TaskInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.TaskInfo,
                    request_deserializer=aiserver__pb2.TaskInfoRequest.FromString,
                    response_serializer=aiserver__pb2.TaskInfoResponse.SerializeToString,
            ),
            'TaskStreamLog': grpc.unary_stream_rpc_method_handler(
                    servicer.TaskStreamLog,
                    request_deserializer=aiserver__pb2.TaskStreamLogRequest.FromString,
                    response_serializer=aiserver__pb2.TaskStreamLogResponse.SerializeToString,
            ),
            'TaskSendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.TaskSendMessage,
                    request_deserializer=aiserver__pb2.TaskSendMessageRequest.FromString,
                    response_serializer=aiserver__pb2.TaskSendMessageResponse.SerializeToString,
            ),
            'TaskProvideResult': grpc.unary_unary_rpc_method_handler(
                    servicer.TaskProvideResult,
                    request_deserializer=aiserver__pb2.TaskProvideResultRequest.FromString,
                    response_serializer=aiserver__pb2.TaskProvideResultResponse.SerializeToString,
            ),
            'CreateExperimentalIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateExperimentalIndex,
                    request_deserializer=aiserver__pb2.CreateExperimentalIndexRequest.FromString,
                    response_serializer=aiserver__pb2.CreateExperimentalIndexResponse.SerializeToString,
            ),
            'ListExperimentalIndexFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListExperimentalIndexFiles,
                    request_deserializer=aiserver__pb2.ListExperimentalIndexFilesRequest.FromString,
                    response_serializer=aiserver__pb2.ListExperimentalIndexFilesResponse.SerializeToString,
            ),
            'ListenExperimentalIndex': grpc.unary_stream_rpc_method_handler(
                    servicer.ListenExperimentalIndex,
                    request_deserializer=aiserver__pb2.ListenExperimentalIndexRequest.FromString,
                    response_serializer=aiserver__pb2.ListenExperimentalIndexResponse.SerializeToString,
            ),
            'RegisterFileToIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterFileToIndex,
                    request_deserializer=aiserver__pb2.RegisterFileToIndexRequest.FromString,
                    response_serializer=aiserver__pb2.RequestReceivedResponse.SerializeToString,
            ),
            'SetupIndexDependencies': grpc.unary_unary_rpc_method_handler(
                    servicer.SetupIndexDependencies,
                    request_deserializer=aiserver__pb2.SetupIndexDependenciesRequest.FromString,
                    response_serializer=aiserver__pb2.SetupIndexDependenciesResponse.SerializeToString,
            ),
            'ComputeIndexTopoSort': grpc.unary_unary_rpc_method_handler(
                    servicer.ComputeIndexTopoSort,
                    request_deserializer=aiserver__pb2.ComputeIndexTopoSortRequest.FromString,
                    response_serializer=aiserver__pb2.ComputeIndexTopoSortResponse.SerializeToString,
            ),
            'StreamChatDeepContext': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamChatDeepContext,
                    request_deserializer=aiserver__pb2.StreamChatDeepContextRequest.FromString,
                    response_serializer=aiserver__pb2.StreamChatDeepContextResponse.SerializeToString,
            ),
            'ChooseCodeReferences': grpc.unary_unary_rpc_method_handler(
                    servicer.ChooseCodeReferences,
                    request_deserializer=aiserver__pb2.ChooseCodeReferencesRequest.FromString,
                    response_serializer=aiserver__pb2.RequestReceivedResponse.SerializeToString,
            ),
            'RegisterCodeReferences': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterCodeReferences,
                    request_deserializer=aiserver__pb2.RegisterCodeReferencesRequest.FromString,
                    response_serializer=aiserver__pb2.RegisterCodeReferencesResponse.SerializeToString,
            ),
            'ExtractPaths': grpc.unary_unary_rpc_method_handler(
                    servicer.ExtractPaths,
                    request_deserializer=aiserver__pb2.ExtractPathsRequest.FromString,
                    response_serializer=aiserver__pb2.ExtractPathsResponse.SerializeToString,
            ),
            'SummarizeWithReferences': grpc.unary_unary_rpc_method_handler(
                    servicer.SummarizeWithReferences,
                    request_deserializer=aiserver__pb2.SummarizeWithReferencesRequest.FromString,
                    response_serializer=aiserver__pb2.RequestReceivedResponse.SerializeToString,
            ),
            'DocumentationQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.DocumentationQuery,
                    request_deserializer=aiserver__pb2.DocumentationQueryRequest.FromString,
                    response_serializer=aiserver__pb2.DocumentationQueryResponse.SerializeToString,
            ),
            'AvailableDocs': grpc.unary_unary_rpc_method_handler(
                    servicer.AvailableDocs,
                    request_deserializer=aiserver__pb2.AvailableDocsRequest.FromString,
                    response_serializer=aiserver__pb2.AvailableDocsResponse.SerializeToString,
            ),
            'ReportFeedback': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportFeedback,
                    request_deserializer=aiserver__pb2.ReportFeedbackRequest.FromString,
                    response_serializer=aiserver__pb2.ReportFeedbackResponse.SerializeToString,
            ),
            'ReportBug': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportBug,
                    request_deserializer=aiserver__pb2.ReportBugRequest.FromString,
                    response_serializer=aiserver__pb2.ReportBugResponse.SerializeToString,
            ),
            'StreamChatContext': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamChatContext,
                    request_deserializer=aiserver__pb2.StreamChatContextRequest.FromString,
                    response_serializer=aiserver__pb2.StreamChatContextResponse.SerializeToString,
            ),
            'GenerateTldr': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateTldr,
                    request_deserializer=aiserver__pb2.GenerateTldrRequest.FromString,
                    response_serializer=aiserver__pb2.GenerateTldrResponse.SerializeToString,
            ),
            'TaskStreamChatContext': grpc.unary_stream_rpc_method_handler(
                    servicer.TaskStreamChatContext,
                    request_deserializer=aiserver__pb2.TaskStreamChatContextRequest.FromString,
                    response_serializer=aiserver__pb2.TaskStreamChatContextResponseWrapped.SerializeToString,
            ),
            'RerankResults': grpc.unary_unary_rpc_method_handler(
                    servicer.RerankResults,
                    request_deserializer=aiserver__pb2.RerankerRequest.FromString,
                    response_serializer=aiserver__pb2.RerankerResponse.SerializeToString,
            ),
            'ModelQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.ModelQuery,
                    request_deserializer=aiserver__pb2.ModelQueryRequest.FromString,
                    response_serializer=aiserver__pb2.ModelQueryResponse.SerializeToString,
            ),
            'ModelQueryV2': grpc.unary_stream_rpc_method_handler(
                    servicer.ModelQueryV2,
                    request_deserializer=aiserver__pb2.ModelQueryRequest.FromString,
                    response_serializer=aiserver__pb2.ModelQueryResponseV2.SerializeToString,
            ),
            'IntentPrediction': grpc.unary_unary_rpc_method_handler(
                    servicer.IntentPrediction,
                    request_deserializer=aiserver__pb2.IntentPredictionRequest.FromString,
                    response_serializer=aiserver__pb2.IntentPredictionResponse.SerializeToString,
            ),
            'StreamCursorTutor': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamCursorTutor,
                    request_deserializer=aiserver__pb2.StreamCursorTutorRequest.FromString,
                    response_serializer=aiserver__pb2.StreamCursorTutorResponse.SerializeToString,
            ),
            'CheckFeatureStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckFeatureStatus,
                    request_deserializer=aiserver__pb2.CheckFeatureStatusRequest.FromString,
                    response_serializer=aiserver__pb2.CheckFeatureStatusResponse.SerializeToString,
            ),
            'GetEffectiveTokenLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEffectiveTokenLimit,
                    request_deserializer=aiserver__pb2.GetEffectiveTokenLimitRequest.FromString,
                    response_serializer=aiserver__pb2.GetEffectiveTokenLimitResponse.SerializeToString,
            ),
            'GetContextScores': grpc.unary_unary_rpc_method_handler(
                    servicer.GetContextScores,
                    request_deserializer=aiserver__pb2.ContextScoresRequest.FromString,
                    response_serializer=aiserver__pb2.ContextScoresResponse.SerializeToString,
            ),
            'StreamCpp': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamCpp,
                    request_deserializer=aiserver__pb2.StreamCppRequest.FromString,
                    response_serializer=aiserver__pb2.StreamCppResponse.SerializeToString,
            ),
            'CppConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.CppConfig,
                    request_deserializer=aiserver__pb2.CppConfigRequest.FromString,
                    response_serializer=aiserver__pb2.CppConfigResponse.SerializeToString,
            ),
            'CppEditHistoryStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.CppEditHistoryStatus,
                    request_deserializer=aiserver__pb2.CppEditHistoryStatusRequest.FromString,
                    response_serializer=aiserver__pb2.CppEditHistoryStatusResponse.SerializeToString,
            ),
            'CppAppend': grpc.unary_unary_rpc_method_handler(
                    servicer.CppAppend,
                    request_deserializer=aiserver__pb2.CppAppendRequest.FromString,
                    response_serializer=aiserver__pb2.CppAppendResponse.SerializeToString,
            ),
            'CheckNumberConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckNumberConfig,
                    request_deserializer=aiserver__pb2.CheckNumberConfigRequest.FromString,
                    response_serializer=aiserver__pb2.CheckNumberConfigResponse.SerializeToString,
            ),
            'StreamTerminalAutocomplete': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamTerminalAutocomplete,
                    request_deserializer=aiserver__pb2.StreamTerminalAutocompleteRequest.FromString,
                    response_serializer=aiserver__pb2.StreamTerminalAutocompleteResponse.SerializeToString,
            ),
            'StreamPseudocodeGenerator': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamPseudocodeGenerator,
                    request_deserializer=aiserver__pb2.StreamPseudocodeGeneratorRequest.FromString,
                    response_serializer=aiserver__pb2.StreamPseudocodeGeneratorResponse.SerializeToString,
            ),
            'StreamPseudocodeMapper': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamPseudocodeMapper,
                    request_deserializer=aiserver__pb2.StreamPseudocodeMapperRequest.FromString,
                    response_serializer=aiserver__pb2.StreamPseudocodeMapperResponse.SerializeToString,
            ),
            'StreamAiLintBug': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamAiLintBug,
                    request_deserializer=aiserver__pb2.StreamAiLintBugRequest.FromString,
                    response_serializer=aiserver__pb2.StreamAiLintBugResponse.SerializeToString,
            ),
            'StreamAiCursorHelp': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamAiCursorHelp,
                    request_deserializer=aiserver__pb2.StreamAiCursorHelpRequest.FromString,
                    response_serializer=aiserver__pb2.StreamAiCursorHelpResponse.SerializeToString,
            ),
            'LogUserLintReply': grpc.unary_unary_rpc_method_handler(
                    servicer.LogUserLintReply,
                    request_deserializer=aiserver__pb2.LogUserLintReplyRequest.FromString,
                    response_serializer=aiserver__pb2.LogUserLintReplyResponse.SerializeToString,
            ),
            'LogLinterExplicitUserFeedback': grpc.unary_unary_rpc_method_handler(
                    servicer.LogLinterExplicitUserFeedback,
                    request_deserializer=aiserver__pb2.LogLinterExplicitUserFeedbackRequest.FromString,
                    response_serializer=aiserver__pb2.LogLinterExplicitUserFeedbackResponse.SerializeToString,
            ),
            'StreamFixMarkers': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamFixMarkers,
                    request_deserializer=aiserver__pb2.FixMarkersRequest.FromString,
                    response_serializer=aiserver__pb2.FixMarkersResponse.SerializeToString,
            ),
            'ReportInlineAction': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportInlineAction,
                    request_deserializer=aiserver__pb2.ReportInlineActionRequest.FromString,
                    response_serializer=aiserver__pb2.ReportInlineActionResponse.SerializeToString,
            ),
            'StreamPriomptPrompt': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamPriomptPrompt,
                    request_deserializer=aiserver__pb2.StreamPriomptPromptRequest.FromString,
                    response_serializer=aiserver__pb2.StreamPriomptPromptResponse.SerializeToString,
            ),
            'StreamLint': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamLint,
                    request_deserializer=aiserver__pb2.StreamLintRequest.FromString,
                    response_serializer=aiserver__pb2.StreamChatResponse.SerializeToString,
            ),
            'StreamNewLintRule': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamNewLintRule,
                    request_deserializer=aiserver__pb2.StreamNewRuleRequest.FromString,
                    response_serializer=aiserver__pb2.StreamChatResponse.SerializeToString,
            ),
            'AiProject': grpc.unary_stream_rpc_method_handler(
                    servicer.AiProject,
                    request_deserializer=aiserver__pb2.AiProjectRequest.FromString,
                    response_serializer=aiserver__pb2.AiProjectResponse.SerializeToString,
            ),
            'ToCamelCase': grpc.unary_unary_rpc_method_handler(
                    servicer.ToCamelCase,
                    request_deserializer=aiserver__pb2.ToCamelCaseRequest.FromString,
                    response_serializer=aiserver__pb2.ToCamelCaseResponse.SerializeToString,
            ),
            'ReportGenerationFeedback': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportGenerationFeedback,
                    request_deserializer=aiserver__pb2.ReportGenerationFeedbackRequest.FromString,
                    response_serializer=aiserver__pb2.ReportGenerationFeedbackResponse.SerializeToString,
            ),
            'GetThoughtAnnotation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetThoughtAnnotation,
                    request_deserializer=aiserver__pb2.GetThoughtAnnotationRequest.FromString,
                    response_serializer=aiserver__pb2.GetThoughtAnnotationResponse.SerializeToString,
            ),
            'StreamWebCmdKV1': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamWebCmdKV1,
                    request_deserializer=aiserver__pb2.StreamWebCmdKV1Request.FromString,
                    response_serializer=aiserver__pb2.StreamWebCmdKV1Response.SerializeToString,
            ),
            'StreamNextCursorPrediction': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamNextCursorPrediction,
                    request_deserializer=aiserver__pb2.StreamNextCursorPredictionRequest.FromString,
                    response_serializer=aiserver__pb2.StreamNextCursorPredictionResponse.SerializeToString,
            ),
            'IsCursorPredictionEnabled': grpc.unary_unary_rpc_method_handler(
                    servicer.IsCursorPredictionEnabled,
                    request_deserializer=aiserver__pb2.IsCursorPredictionEnabledRequest.FromString,
                    response_serializer=aiserver__pb2.IsCursorPredictionEnabledResponse.SerializeToString,
            ),
            'GetCppEditClassification': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCppEditClassification,
                    request_deserializer=aiserver__pb2.GetCppEditClassificationRequest.FromString,
                    response_serializer=aiserver__pb2.GetCppEditClassificationResponse.SerializeToString,
            ),
            'GetTerminalCompletion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTerminalCompletion,
                    request_deserializer=aiserver__pb2.GetTerminalCompletionRequest.FromString,
                    response_serializer=aiserver__pb2.GetTerminalCompletionResponse.SerializeToString,
            ),
            'TakeNotesOnCommitDiff': grpc.unary_unary_rpc_method_handler(
                    servicer.TakeNotesOnCommitDiff,
                    request_deserializer=aiserver__pb2.TakeNotesOnCommitDiffRequest.FromString,
                    response_serializer=aiserver__pb2.TakeNotesOnCommitDiffResponse.SerializeToString,
            ),
            'BulkEmbed': grpc.unary_unary_rpc_method_handler(
                    servicer.BulkEmbed,
                    request_deserializer=aiserver__pb2.BulkEmbedRequest.FromString,
                    response_serializer=aiserver__pb2.BulkEmbedResponse.SerializeToString,
            ),
            'ContinueChatRequestWithCommits': grpc.unary_unary_rpc_method_handler(
                    servicer.ContinueChatRequestWithCommits,
                    request_deserializer=aiserver__pb2.ContinueChatRequestWithCommitsRequest.FromString,
                    response_serializer=aiserver__pb2.EmptyResponse.SerializeToString,
            ),
            'BackgroundCmdKEval': grpc.unary_stream_rpc_method_handler(
                    servicer.BackgroundCmdKEval,
                    request_deserializer=aiserver__pb2.BackgroundCmdKEvalRequest.FromString,
                    response_serializer=aiserver__pb2.BackgroundCmdKEvalResponse.SerializeToString,
            ),
            'BackgroundCmdK': grpc.unary_stream_rpc_method_handler(
                    servicer.BackgroundCmdK,
                    request_deserializer=aiserver__pb2.BackgroundCmdKRequest.FromString,
                    response_serializer=aiserver__pb2.BackgroundCmdKResponse.SerializeToString,
            ),
            'StreamCursorMotion': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamCursorMotion,
                    request_deserializer=aiserver__pb2.StreamCursorMotionRequest.FromString,
                    response_serializer=aiserver__pb2.StreamCursorMotionResponse.SerializeToString,
            ),
            'CalculateAutoSelection': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateAutoSelection,
                    request_deserializer=aiserver__pb2.CalculateAutoSelectionRequest.FromString,
                    response_serializer=aiserver__pb2.CalculateAutoSelectionResponse.SerializeToString,
            ),
            'GetAtSymbolSuggestions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAtSymbolSuggestions,
                    request_deserializer=aiserver__pb2.GetAtSymbolSuggestionsRequest.FromString,
                    response_serializer=aiserver__pb2.GetAtSymbolSuggestionsResponse.SerializeToString,
            ),
            'GetCodebaseQuestions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCodebaseQuestions,
                    request_deserializer=aiserver__pb2.GetChatRequest.FromString,
                    response_serializer=aiserver__pb2.GetCodebaseQuestionsResponse.SerializeToString,
            ),
            'GetRankedContextFromContextBank': grpc.unary_stream_rpc_method_handler(
                    servicer.GetRankedContextFromContextBank,
                    request_deserializer=aiserver__pb2.GetRankedContextFromContextBankRequest.FromString,
                    response_serializer=aiserver__pb2.GetRankedContextFromContextBankResponse.SerializeToString,
            ),
            'CppEditHistoryAppend': grpc.unary_unary_rpc_method_handler(
                    servicer.CppEditHistoryAppend,
                    request_deserializer=aiserver__pb2.EditHistoryAppendChangesRequest.FromString,
                    response_serializer=aiserver__pb2.EditHistoryAppendChangesResponse.SerializeToString,
            ),
            'DevOnlyGetPastRequestIds': grpc.unary_unary_rpc_method_handler(
                    servicer.DevOnlyGetPastRequestIds,
                    request_deserializer=aiserver__pb2.DevOnlyGetPastRequestIdsRequest.FromString,
                    response_serializer=aiserver__pb2.DevOnlyGetPastRequestIdsResponse.SerializeToString,
            ),
            'GetFilesForComposer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFilesForComposer,
                    request_deserializer=aiserver__pb2.GetFilesForComposerRequest.FromString,
                    response_serializer=aiserver__pb2.GetFilesForComposerResponse.SerializeToString,
            ),
            'TryParseTypeScriptTreeSitter': grpc.unary_unary_rpc_method_handler(
                    servicer.TryParseTypeScriptTreeSitter,
                    request_deserializer=aiserver__pb2.TryParseTypeScriptTreeSitterRequest.FromString,
                    response_serializer=aiserver__pb2.TryParseTypeScriptTreeSitterResponse.SerializeToString,
            ),
            'NameTab': grpc.unary_unary_rpc_method_handler(
                    servicer.NameTab,
                    request_deserializer=aiserver__pb2.NameTabRequest.FromString,
                    response_serializer=aiserver__pb2.NameTabResponse.SerializeToString,
            ),
            'IsTerminalFinished': grpc.unary_unary_rpc_method_handler(
                    servicer.IsTerminalFinished,
                    request_deserializer=aiserver__pb2.IsTerminalFinishedRequest.FromString,
                    response_serializer=aiserver__pb2.IsTerminalFinishedResponse.SerializeToString,
            ),
            'TestModelStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.TestModelStatus,
                    request_deserializer=aiserver__pb2.TestModelStatusRequest.FromString,
                    response_serializer=aiserver__pb2.TestModelStatusResponse.SerializeToString,
            ),
            'FindBugs': grpc.unary_unary_rpc_method_handler(
                    servicer.FindBugs,
                    request_deserializer=aiserver__pb2.FindBugsRequest.FromString,
                    response_serializer=aiserver__pb2.FindBugsResponse.SerializeToString,
            ),
            'ContextReranking': grpc.unary_unary_rpc_method_handler(
                    servicer.ContextReranking,
                    request_deserializer=aiserver__pb2.ContextRerankingRequest.FromString,
                    response_serializer=aiserver__pb2.ContextRerankingResponse.SerializeToString,
            ),
            'AutoContext': grpc.unary_unary_rpc_method_handler(
                    servicer.AutoContext,
                    request_deserializer=aiserver__pb2.AutoContextRequest.FromString,
                    response_serializer=aiserver__pb2.AutoContextResponse.SerializeToString,
            ),
            'WriteGitCommitMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteGitCommitMessage,
                    request_deserializer=aiserver__pb2.WriteGitCommitMessageRequest.FromString,
                    response_serializer=aiserver__pb2.WriteGitCommitMessageResponse.SerializeToString,
            ),
            'StreamBugBot': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamBugBot,
                    request_deserializer=aiserver__pb2.StreamBugBotRequest.FromString,
                    response_serializer=aiserver__pb2.StreamBugBotResponse.SerializeToString,
            ),
            'CheckBugBotPrice': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckBugBotPrice,
                    request_deserializer=aiserver__pb2.CheckBugBotPriceRequest.FromString,
                    response_serializer=aiserver__pb2.CheckBugBotPriceResponse.SerializeToString,
            ),
            'CheckBugBotTelemetryHealthy': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckBugBotTelemetryHealthy,
                    request_deserializer=aiserver__pb2.CheckBugBotTelemetryHealthyRequest.FromString,
                    response_serializer=aiserver__pb2.CheckBugBotTelemetryHealthyResponse.SerializeToString,
            ),
            'GetSuggestedBugBotIterations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSuggestedBugBotIterations,
                    request_deserializer=aiserver__pb2.GetSuggestedBugBotIterationsRequest.FromString,
                    response_serializer=aiserver__pb2.GetSuggestedBugBotIterationsResponse.SerializeToString,
            ),
            'TestBidi': grpc.unary_unary_rpc_method_handler(
                    servicer.TestBidi,
                    request_deserializer=aiserver__pb2.TestBidiRequest.FromString,
                    response_serializer=aiserver__pb2.TestBidiResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aiserver.v1.AiService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('aiserver.v1.AiService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AiService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/HealthCheck',
            aiserver__pb2.HealthCheckRequest.SerializeToString,
            aiserver__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PrivacyCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/PrivacyCheck',
            aiserver__pb2.PrivacyCheckRequest.SerializeToString,
            aiserver__pb2.PrivacyCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TimeLeftHealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/TimeLeftHealthCheck',
            aiserver__pb2.HealthCheckRequest.SerializeToString,
            aiserver__pb2.TimeLeftHealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ThrowErrorCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/ThrowErrorCheck',
            aiserver__pb2.ThrowErrorCheckRequest.SerializeToString,
            aiserver__pb2.ThrowErrorCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AvailableModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/AvailableModels',
            aiserver__pb2.AvailableModelsRequest.SerializeToString,
            aiserver__pb2.AvailableModelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamChatTryReallyHard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamChatTryReallyHard',
            aiserver__pb2.GetChatRequest.SerializeToString,
            aiserver__pb2.StreamChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RerankDocuments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/RerankDocuments',
            aiserver__pb2.RerankDocumentsRequest.SerializeToString,
            aiserver__pb2.RerankDocumentsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamComposer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamComposer',
            aiserver__pb2.GetComposerChatRequest.SerializeToString,
            aiserver__pb2.StreamChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamComposerContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamComposerContext',
            aiserver__pb2.StreamChatContextRequest.SerializeToString,
            aiserver__pb2.StreamChatContextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WarmComposerCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/WarmComposerCache',
            aiserver__pb2.GetComposerChatRequest.SerializeToString,
            aiserver__pb2.WarmComposerCacheResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def KeepComposerCacheWarm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/KeepComposerCacheWarm',
            aiserver__pb2.KeepComposerCacheWarmRequest.SerializeToString,
            aiserver__pb2.KeepComposerCacheWarmResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamPotentialLocs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamPotentialLocs',
            aiserver__pb2.PotentialLocsRequest.SerializeToString,
            aiserver__pb2.PotentialLocsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamPotentialLocsUnderneath(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamPotentialLocsUnderneath',
            aiserver__pb2.PotentialLocsUnderneathRequest.SerializeToString,
            aiserver__pb2.PotentialLocsUnderneathResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamPotentialLocsInitialQueries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamPotentialLocsInitialQueries',
            aiserver__pb2.PotentialLocsInitialQueriesRequest.SerializeToString,
            aiserver__pb2.PotentialLocsInitialQueriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamNotepadChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamNotepadChat',
            aiserver__pb2.GetNotepadChatRequest.SerializeToString,
            aiserver__pb2.StreamChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetChatTitle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/GetChatTitle',
            aiserver__pb2.GetChatTitleRequest.SerializeToString,
            aiserver__pb2.GetChatTitleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCompletion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/GetCompletion',
            aiserver__pb2.GetCompletionRequest.SerializeToString,
            aiserver__pb2.GetCompletionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/GetSearch',
            aiserver__pb2.GetSearchRequest.SerializeToString,
            aiserver__pb2.GetSearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamInlineEdits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamInlineEdits',
            aiserver__pb2.StreamInlineEditsRequest.SerializeToString,
            aiserver__pb2.StreamInlineEditsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SummarizeConversation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/SummarizeConversation',
            aiserver__pb2.GetChatRequest.SerializeToString,
            aiserver__pb2.SummarizeConversationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IsolatedTreesitter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/IsolatedTreesitter',
            aiserver__pb2.IsolatedTreesitterRequest.SerializeToString,
            aiserver__pb2.IsolatedTreesitterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSimplePrompt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/GetSimplePrompt',
            aiserver__pb2.GetSimplePromptRequest.SerializeToString,
            aiserver__pb2.GetSimplePromptResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckLongFilesFit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/CheckLongFilesFit',
            aiserver__pb2.GetChatRequest.SerializeToString,
            aiserver__pb2.CheckLongFilesFitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEvaluationPrompt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/GetEvaluationPrompt',
            aiserver__pb2.GetEvaluationPromptRequest.SerializeToString,
            aiserver__pb2.GetEvaluationPromptResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/GetUserInfo',
            aiserver__pb2.GetUserInfoRequest.SerializeToString,
            aiserver__pb2.GetUserInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ClearAndRedoEntireBucket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/ClearAndRedoEntireBucket',
            aiserver__pb2.ClearAndRedoEntireBucketRequest.SerializeToString,
            aiserver__pb2.ClearAndRedoEntireBucketResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamBranchGemini(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamBranchGemini',
            aiserver__pb2.StreamBranchGeminiRequest.SerializeToString,
            aiserver__pb2.StreamBranchGeminiResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamBranchFileSelections(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamBranchFileSelections',
            aiserver__pb2.StreamBranchFileSelectionsRequest.SerializeToString,
            aiserver__pb2.StreamBranchFileSelectionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamBackgroundEdit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamBackgroundEdit',
            aiserver__pb2.StreamBackgroundEditRequest.SerializeToString,
            aiserver__pb2.StreamChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamGPTFourEdit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamGPTFourEdit',
            aiserver__pb2.StreamGPTFourEditRequest.SerializeToString,
            aiserver__pb2.StreamChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamChat',
            aiserver__pb2.GetChatRequest.SerializeToString,
            aiserver__pb2.StreamChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamChatWeb(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamChatWeb',
            aiserver__pb2.GetChatRequest.SerializeToString,
            aiserver__pb2.StreamChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WarmChatCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/WarmChatCache',
            aiserver__pb2.WarmChatCacheRequest.SerializeToString,
            aiserver__pb2.WarmChatCacheResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamEdit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamEdit',
            aiserver__pb2.StreamEditRequest.SerializeToString,
            aiserver__pb2.StreamChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PreloadEdit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/PreloadEdit',
            aiserver__pb2.PreloadEditRequest.SerializeToString,
            aiserver__pb2.PreloadEditResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamFastEdit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamFastEdit',
            aiserver__pb2.StreamFastEditRequest.SerializeToString,
            aiserver__pb2.StreamFastEditResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamGenerate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamGenerate',
            aiserver__pb2.StreamGenerateRequest.SerializeToString,
            aiserver__pb2.StreamChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamInlineLongCompletion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamInlineLongCompletion',
            aiserver__pb2.StreamInlineLongCompletionRequest.SerializeToString,
            aiserver__pb2.StreamChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SlashEdit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/SlashEdit',
            aiserver__pb2.SlashEditRequest.SerializeToString,
            aiserver__pb2.SlashEditResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SlashEditFollowUpWithPreviousEdits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/SlashEditFollowUpWithPreviousEdits',
            aiserver__pb2.SlashEditFollowUpWithPreviousEditsRequest.SerializeToString,
            aiserver__pb2.StreamSlashEditFollowUpWithPreviousEditsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamAiPreviews(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamAiPreviews',
            aiserver__pb2.StreamAiPreviewsRequest.SerializeToString,
            aiserver__pb2.StreamAiPreviewsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ShouldTurnOnCppOnboarding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/ShouldTurnOnCppOnboarding',
            aiserver__pb2.ShouldTurnOnCppOnboardingRequest.SerializeToString,
            aiserver__pb2.ShouldTurnOnCppOnboardingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamReview(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamReview',
            aiserver__pb2.ReviewRequest.SerializeToString,
            aiserver__pb2.ReviewResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamReviewChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamReviewChat',
            aiserver__pb2.ReviewChatRequest.SerializeToString,
            aiserver__pb2.ReviewChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckQueuePosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/CheckQueuePosition',
            aiserver__pb2.CheckQueuePositionRequest.SerializeToString,
            aiserver__pb2.CheckQueuePositionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckUsageBasedPrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/CheckUsageBasedPrice',
            aiserver__pb2.CheckUsageBasedPriceRequest.SerializeToString,
            aiserver__pb2.CheckUsageBasedPriceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DoThisForMeCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/DoThisForMeCheck',
            aiserver__pb2.DoThisForMeCheckRequest.SerializeToString,
            aiserver__pb2.DoThisForMeCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamDoThisForMe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamDoThisForMe',
            aiserver__pb2.DoThisForMeRequest.SerializeToString,
            aiserver__pb2.DoThisForMeResponseWrapped.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamChatToolformer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamChatToolformer',
            aiserver__pb2.GetChatRequest.SerializeToString,
            aiserver__pb2.StreamChatToolformerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamChatToolformerContinue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamChatToolformerContinue',
            aiserver__pb2.StreamChatToolformerContinueRequest.SerializeToString,
            aiserver__pb2.StreamChatToolformerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PushAiThought(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/PushAiThought',
            aiserver__pb2.PushAiThoughtRequest.SerializeToString,
            aiserver__pb2.PushAiThoughtResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckDoableAsTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/CheckDoableAsTask',
            aiserver__pb2.CheckDoableAsTaskRequest.SerializeToString,
            aiserver__pb2.CheckDoableAsTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReportGroundTruthCandidate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/ReportGroundTruthCandidate',
            aiserver__pb2.ReportGroundTruthCandidateRequest.SerializeToString,
            aiserver__pb2.ReportGroundTruthCandidateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReportCmdKFate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/ReportCmdKFate',
            aiserver__pb2.ReportCmdKFateRequest.SerializeToString,
            aiserver__pb2.ReportCmdKFateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ShowWelcomeScreen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/ShowWelcomeScreen',
            aiserver__pb2.ShowWelcomeScreenRequest.SerializeToString,
            aiserver__pb2.ShowWelcomeScreenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InterfaceAgentInit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/InterfaceAgentInit',
            aiserver__pb2.InterfaceAgentInitRequest.SerializeToString,
            aiserver__pb2.InterfaceAgentInitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamInterfaceAgentStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamInterfaceAgentStatus',
            aiserver__pb2.StreamInterfaceAgentStatusRequest.SerializeToString,
            aiserver__pb2.StreamInterfaceAgentStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TaskGetInterfaceAgentStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/TaskGetInterfaceAgentStatus',
            aiserver__pb2.TaskGetInterfaceAgentStatusRequest.SerializeToString,
            aiserver__pb2.TaskGetInterfaceAgentStatusResponseWrapped.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TaskInit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/TaskInit',
            aiserver__pb2.TaskInitRequest.SerializeToString,
            aiserver__pb2.TaskInitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TaskPause(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/TaskPause',
            aiserver__pb2.TaskPauseRequest.SerializeToString,
            aiserver__pb2.TaskPauseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TaskInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/TaskInfo',
            aiserver__pb2.TaskInfoRequest.SerializeToString,
            aiserver__pb2.TaskInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TaskStreamLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/TaskStreamLog',
            aiserver__pb2.TaskStreamLogRequest.SerializeToString,
            aiserver__pb2.TaskStreamLogResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TaskSendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/TaskSendMessage',
            aiserver__pb2.TaskSendMessageRequest.SerializeToString,
            aiserver__pb2.TaskSendMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TaskProvideResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/TaskProvideResult',
            aiserver__pb2.TaskProvideResultRequest.SerializeToString,
            aiserver__pb2.TaskProvideResultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateExperimentalIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/CreateExperimentalIndex',
            aiserver__pb2.CreateExperimentalIndexRequest.SerializeToString,
            aiserver__pb2.CreateExperimentalIndexResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListExperimentalIndexFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/ListExperimentalIndexFiles',
            aiserver__pb2.ListExperimentalIndexFilesRequest.SerializeToString,
            aiserver__pb2.ListExperimentalIndexFilesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListenExperimentalIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/ListenExperimentalIndex',
            aiserver__pb2.ListenExperimentalIndexRequest.SerializeToString,
            aiserver__pb2.ListenExperimentalIndexResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterFileToIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/RegisterFileToIndex',
            aiserver__pb2.RegisterFileToIndexRequest.SerializeToString,
            aiserver__pb2.RequestReceivedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetupIndexDependencies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/SetupIndexDependencies',
            aiserver__pb2.SetupIndexDependenciesRequest.SerializeToString,
            aiserver__pb2.SetupIndexDependenciesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ComputeIndexTopoSort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/ComputeIndexTopoSort',
            aiserver__pb2.ComputeIndexTopoSortRequest.SerializeToString,
            aiserver__pb2.ComputeIndexTopoSortResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamChatDeepContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamChatDeepContext',
            aiserver__pb2.StreamChatDeepContextRequest.SerializeToString,
            aiserver__pb2.StreamChatDeepContextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ChooseCodeReferences(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/ChooseCodeReferences',
            aiserver__pb2.ChooseCodeReferencesRequest.SerializeToString,
            aiserver__pb2.RequestReceivedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterCodeReferences(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/RegisterCodeReferences',
            aiserver__pb2.RegisterCodeReferencesRequest.SerializeToString,
            aiserver__pb2.RegisterCodeReferencesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExtractPaths(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/ExtractPaths',
            aiserver__pb2.ExtractPathsRequest.SerializeToString,
            aiserver__pb2.ExtractPathsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SummarizeWithReferences(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/SummarizeWithReferences',
            aiserver__pb2.SummarizeWithReferencesRequest.SerializeToString,
            aiserver__pb2.RequestReceivedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DocumentationQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/DocumentationQuery',
            aiserver__pb2.DocumentationQueryRequest.SerializeToString,
            aiserver__pb2.DocumentationQueryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AvailableDocs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/AvailableDocs',
            aiserver__pb2.AvailableDocsRequest.SerializeToString,
            aiserver__pb2.AvailableDocsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReportFeedback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/ReportFeedback',
            aiserver__pb2.ReportFeedbackRequest.SerializeToString,
            aiserver__pb2.ReportFeedbackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReportBug(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/ReportBug',
            aiserver__pb2.ReportBugRequest.SerializeToString,
            aiserver__pb2.ReportBugResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamChatContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamChatContext',
            aiserver__pb2.StreamChatContextRequest.SerializeToString,
            aiserver__pb2.StreamChatContextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateTldr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/GenerateTldr',
            aiserver__pb2.GenerateTldrRequest.SerializeToString,
            aiserver__pb2.GenerateTldrResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TaskStreamChatContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/TaskStreamChatContext',
            aiserver__pb2.TaskStreamChatContextRequest.SerializeToString,
            aiserver__pb2.TaskStreamChatContextResponseWrapped.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RerankResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/RerankResults',
            aiserver__pb2.RerankerRequest.SerializeToString,
            aiserver__pb2.RerankerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ModelQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/ModelQuery',
            aiserver__pb2.ModelQueryRequest.SerializeToString,
            aiserver__pb2.ModelQueryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ModelQueryV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/ModelQueryV2',
            aiserver__pb2.ModelQueryRequest.SerializeToString,
            aiserver__pb2.ModelQueryResponseV2.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IntentPrediction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/IntentPrediction',
            aiserver__pb2.IntentPredictionRequest.SerializeToString,
            aiserver__pb2.IntentPredictionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamCursorTutor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamCursorTutor',
            aiserver__pb2.StreamCursorTutorRequest.SerializeToString,
            aiserver__pb2.StreamCursorTutorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckFeatureStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/CheckFeatureStatus',
            aiserver__pb2.CheckFeatureStatusRequest.SerializeToString,
            aiserver__pb2.CheckFeatureStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEffectiveTokenLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/GetEffectiveTokenLimit',
            aiserver__pb2.GetEffectiveTokenLimitRequest.SerializeToString,
            aiserver__pb2.GetEffectiveTokenLimitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetContextScores(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/GetContextScores',
            aiserver__pb2.ContextScoresRequest.SerializeToString,
            aiserver__pb2.ContextScoresResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamCpp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamCpp',
            aiserver__pb2.StreamCppRequest.SerializeToString,
            aiserver__pb2.StreamCppResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CppConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/CppConfig',
            aiserver__pb2.CppConfigRequest.SerializeToString,
            aiserver__pb2.CppConfigResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CppEditHistoryStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/CppEditHistoryStatus',
            aiserver__pb2.CppEditHistoryStatusRequest.SerializeToString,
            aiserver__pb2.CppEditHistoryStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CppAppend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/CppAppend',
            aiserver__pb2.CppAppendRequest.SerializeToString,
            aiserver__pb2.CppAppendResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckNumberConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/CheckNumberConfig',
            aiserver__pb2.CheckNumberConfigRequest.SerializeToString,
            aiserver__pb2.CheckNumberConfigResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamTerminalAutocomplete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamTerminalAutocomplete',
            aiserver__pb2.StreamTerminalAutocompleteRequest.SerializeToString,
            aiserver__pb2.StreamTerminalAutocompleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamPseudocodeGenerator(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamPseudocodeGenerator',
            aiserver__pb2.StreamPseudocodeGeneratorRequest.SerializeToString,
            aiserver__pb2.StreamPseudocodeGeneratorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamPseudocodeMapper(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamPseudocodeMapper',
            aiserver__pb2.StreamPseudocodeMapperRequest.SerializeToString,
            aiserver__pb2.StreamPseudocodeMapperResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamAiLintBug(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamAiLintBug',
            aiserver__pb2.StreamAiLintBugRequest.SerializeToString,
            aiserver__pb2.StreamAiLintBugResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamAiCursorHelp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamAiCursorHelp',
            aiserver__pb2.StreamAiCursorHelpRequest.SerializeToString,
            aiserver__pb2.StreamAiCursorHelpResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LogUserLintReply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/LogUserLintReply',
            aiserver__pb2.LogUserLintReplyRequest.SerializeToString,
            aiserver__pb2.LogUserLintReplyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LogLinterExplicitUserFeedback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/LogLinterExplicitUserFeedback',
            aiserver__pb2.LogLinterExplicitUserFeedbackRequest.SerializeToString,
            aiserver__pb2.LogLinterExplicitUserFeedbackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamFixMarkers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamFixMarkers',
            aiserver__pb2.FixMarkersRequest.SerializeToString,
            aiserver__pb2.FixMarkersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReportInlineAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/ReportInlineAction',
            aiserver__pb2.ReportInlineActionRequest.SerializeToString,
            aiserver__pb2.ReportInlineActionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamPriomptPrompt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamPriomptPrompt',
            aiserver__pb2.StreamPriomptPromptRequest.SerializeToString,
            aiserver__pb2.StreamPriomptPromptResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamLint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamLint',
            aiserver__pb2.StreamLintRequest.SerializeToString,
            aiserver__pb2.StreamChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamNewLintRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamNewLintRule',
            aiserver__pb2.StreamNewRuleRequest.SerializeToString,
            aiserver__pb2.StreamChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AiProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/AiProject',
            aiserver__pb2.AiProjectRequest.SerializeToString,
            aiserver__pb2.AiProjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ToCamelCase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/ToCamelCase',
            aiserver__pb2.ToCamelCaseRequest.SerializeToString,
            aiserver__pb2.ToCamelCaseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReportGenerationFeedback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/ReportGenerationFeedback',
            aiserver__pb2.ReportGenerationFeedbackRequest.SerializeToString,
            aiserver__pb2.ReportGenerationFeedbackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetThoughtAnnotation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/GetThoughtAnnotation',
            aiserver__pb2.GetThoughtAnnotationRequest.SerializeToString,
            aiserver__pb2.GetThoughtAnnotationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamWebCmdKV1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamWebCmdKV1',
            aiserver__pb2.StreamWebCmdKV1Request.SerializeToString,
            aiserver__pb2.StreamWebCmdKV1Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamNextCursorPrediction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamNextCursorPrediction',
            aiserver__pb2.StreamNextCursorPredictionRequest.SerializeToString,
            aiserver__pb2.StreamNextCursorPredictionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IsCursorPredictionEnabled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/IsCursorPredictionEnabled',
            aiserver__pb2.IsCursorPredictionEnabledRequest.SerializeToString,
            aiserver__pb2.IsCursorPredictionEnabledResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCppEditClassification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/GetCppEditClassification',
            aiserver__pb2.GetCppEditClassificationRequest.SerializeToString,
            aiserver__pb2.GetCppEditClassificationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTerminalCompletion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/GetTerminalCompletion',
            aiserver__pb2.GetTerminalCompletionRequest.SerializeToString,
            aiserver__pb2.GetTerminalCompletionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TakeNotesOnCommitDiff(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/TakeNotesOnCommitDiff',
            aiserver__pb2.TakeNotesOnCommitDiffRequest.SerializeToString,
            aiserver__pb2.TakeNotesOnCommitDiffResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BulkEmbed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/BulkEmbed',
            aiserver__pb2.BulkEmbedRequest.SerializeToString,
            aiserver__pb2.BulkEmbedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ContinueChatRequestWithCommits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/ContinueChatRequestWithCommits',
            aiserver__pb2.ContinueChatRequestWithCommitsRequest.SerializeToString,
            aiserver__pb2.EmptyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BackgroundCmdKEval(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/BackgroundCmdKEval',
            aiserver__pb2.BackgroundCmdKEvalRequest.SerializeToString,
            aiserver__pb2.BackgroundCmdKEvalResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BackgroundCmdK(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/BackgroundCmdK',
            aiserver__pb2.BackgroundCmdKRequest.SerializeToString,
            aiserver__pb2.BackgroundCmdKResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamCursorMotion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamCursorMotion',
            aiserver__pb2.StreamCursorMotionRequest.SerializeToString,
            aiserver__pb2.StreamCursorMotionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CalculateAutoSelection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/CalculateAutoSelection',
            aiserver__pb2.CalculateAutoSelectionRequest.SerializeToString,
            aiserver__pb2.CalculateAutoSelectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAtSymbolSuggestions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/GetAtSymbolSuggestions',
            aiserver__pb2.GetAtSymbolSuggestionsRequest.SerializeToString,
            aiserver__pb2.GetAtSymbolSuggestionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCodebaseQuestions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/GetCodebaseQuestions',
            aiserver__pb2.GetChatRequest.SerializeToString,
            aiserver__pb2.GetCodebaseQuestionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRankedContextFromContextBank(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/GetRankedContextFromContextBank',
            aiserver__pb2.GetRankedContextFromContextBankRequest.SerializeToString,
            aiserver__pb2.GetRankedContextFromContextBankResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CppEditHistoryAppend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/CppEditHistoryAppend',
            aiserver__pb2.EditHistoryAppendChangesRequest.SerializeToString,
            aiserver__pb2.EditHistoryAppendChangesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DevOnlyGetPastRequestIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/DevOnlyGetPastRequestIds',
            aiserver__pb2.DevOnlyGetPastRequestIdsRequest.SerializeToString,
            aiserver__pb2.DevOnlyGetPastRequestIdsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFilesForComposer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/GetFilesForComposer',
            aiserver__pb2.GetFilesForComposerRequest.SerializeToString,
            aiserver__pb2.GetFilesForComposerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TryParseTypeScriptTreeSitter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/TryParseTypeScriptTreeSitter',
            aiserver__pb2.TryParseTypeScriptTreeSitterRequest.SerializeToString,
            aiserver__pb2.TryParseTypeScriptTreeSitterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NameTab(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/NameTab',
            aiserver__pb2.NameTabRequest.SerializeToString,
            aiserver__pb2.NameTabResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IsTerminalFinished(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/IsTerminalFinished',
            aiserver__pb2.IsTerminalFinishedRequest.SerializeToString,
            aiserver__pb2.IsTerminalFinishedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TestModelStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/TestModelStatus',
            aiserver__pb2.TestModelStatusRequest.SerializeToString,
            aiserver__pb2.TestModelStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindBugs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/FindBugs',
            aiserver__pb2.FindBugsRequest.SerializeToString,
            aiserver__pb2.FindBugsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ContextReranking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/ContextReranking',
            aiserver__pb2.ContextRerankingRequest.SerializeToString,
            aiserver__pb2.ContextRerankingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AutoContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/AutoContext',
            aiserver__pb2.AutoContextRequest.SerializeToString,
            aiserver__pb2.AutoContextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteGitCommitMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/WriteGitCommitMessage',
            aiserver__pb2.WriteGitCommitMessageRequest.SerializeToString,
            aiserver__pb2.WriteGitCommitMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamBugBot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.AiService/StreamBugBot',
            aiserver__pb2.StreamBugBotRequest.SerializeToString,
            aiserver__pb2.StreamBugBotResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckBugBotPrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/CheckBugBotPrice',
            aiserver__pb2.CheckBugBotPriceRequest.SerializeToString,
            aiserver__pb2.CheckBugBotPriceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckBugBotTelemetryHealthy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/CheckBugBotTelemetryHealthy',
            aiserver__pb2.CheckBugBotTelemetryHealthyRequest.SerializeToString,
            aiserver__pb2.CheckBugBotTelemetryHealthyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSuggestedBugBotIterations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/GetSuggestedBugBotIterations',
            aiserver__pb2.GetSuggestedBugBotIterationsRequest.SerializeToString,
            aiserver__pb2.GetSuggestedBugBotIterationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TestBidi(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.AiService/TestBidi',
            aiserver__pb2.TestBidiRequest.SerializeToString,
            aiserver__pb2.TestBidiResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class RepositoryServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FastRepoInitHandshake = channel.unary_unary(
                '/aiserver.v1.RepositoryService/FastRepoInitHandshake',
                request_serializer=aiserver__pb2.FastRepoInitHandshakeRequest.SerializeToString,
                response_deserializer=aiserver__pb2.FastRepoInitHandshakeResponse.FromString,
                _registered_method=True)
        self.SyncMerkleSubtree = channel.unary_unary(
                '/aiserver.v1.RepositoryService/SyncMerkleSubtree',
                request_serializer=aiserver__pb2.SyncMerkleSubtreeRequest.SerializeToString,
                response_deserializer=aiserver__pb2.SyncMerkleSubtreeResponse.FromString,
                _registered_method=True)
        self.FastUpdateFile = channel.unary_unary(
                '/aiserver.v1.RepositoryService/FastUpdateFile',
                request_serializer=aiserver__pb2.FastUpdateFileRequest.SerializeToString,
                response_deserializer=aiserver__pb2.FastUpdateFileResponse.FromString,
                _registered_method=True)
        self.SearchRepositoryV2 = channel.unary_unary(
                '/aiserver.v1.RepositoryService/SearchRepositoryV2',
                request_serializer=aiserver__pb2.SearchRepositoryRequest.SerializeToString,
                response_deserializer=aiserver__pb2.SearchRepositoryResponse.FromString,
                _registered_method=True)
        self.RemoveRepositoryV2 = channel.unary_unary(
                '/aiserver.v1.RepositoryService/RemoveRepositoryV2',
                request_serializer=aiserver__pb2.RemoveRepositoryRequest.SerializeToString,
                response_deserializer=aiserver__pb2.RemoveRepositoryResponse.FromString,
                _registered_method=True)
        self.SemSearchFast = channel.unary_stream(
                '/aiserver.v1.RepositoryService/SemSearchFast',
                request_serializer=aiserver__pb2.SemSearchRequest.SerializeToString,
                response_deserializer=aiserver__pb2.SemSearchResponse.FromString,
                _registered_method=True)
        self.SemSearch = channel.unary_stream(
                '/aiserver.v1.RepositoryService/SemSearch',
                request_serializer=aiserver__pb2.SemSearchRequest.SerializeToString,
                response_deserializer=aiserver__pb2.SemSearchResponse.FromString,
                _registered_method=True)
        self.EnsureIndexCreated = channel.unary_unary(
                '/aiserver.v1.RepositoryService/EnsureIndexCreated',
                request_serializer=aiserver__pb2.EnsureIndexCreatedRequest.SerializeToString,
                response_deserializer=aiserver__pb2.EnsureIndexCreatedResponse.FromString,
                _registered_method=True)
        self.GetHighLevelFolderDescription = channel.unary_unary(
                '/aiserver.v1.RepositoryService/GetHighLevelFolderDescription',
                request_serializer=aiserver__pb2.GetHighLevelFolderDescriptionRequest.SerializeToString,
                response_deserializer=aiserver__pb2.GetHighLevelFolderDescriptionResponse.FromString,
                _registered_method=True)
        self.GetEmbeddings = channel.unary_unary(
                '/aiserver.v1.RepositoryService/GetEmbeddings',
                request_serializer=aiserver__pb2.GetEmbeddingsRequest.SerializeToString,
                response_deserializer=aiserver__pb2.GetEmbeddingsResponse.FromString,
                _registered_method=True)
        self.GetUploadLimits = channel.unary_unary(
                '/aiserver.v1.RepositoryService/GetUploadLimits',
                request_serializer=aiserver__pb2.GetUploadLimitsRequest.SerializeToString,
                response_deserializer=aiserver__pb2.GetUploadLimitsResponse.FromString,
                _registered_method=True)
        self.GetNumFilesToSend = channel.unary_unary(
                '/aiserver.v1.RepositoryService/GetNumFilesToSend',
                request_serializer=aiserver__pb2.GetNumFilesToSendRequest.SerializeToString,
                response_deserializer=aiserver__pb2.GetNumFilesToSendResponse.FromString,
                _registered_method=True)
        self.GetAvailableChunkingStrategies = channel.unary_unary(
                '/aiserver.v1.RepositoryService/GetAvailableChunkingStrategies',
                request_serializer=aiserver__pb2.GetAvailableChunkingStrategiesRequest.SerializeToString,
                response_deserializer=aiserver__pb2.GetAvailableChunkingStrategiesResponse.FromString,
                _registered_method=True)
        self.GetLineNumberClassifications = channel.unary_stream(
                '/aiserver.v1.RepositoryService/GetLineNumberClassifications',
                request_serializer=aiserver__pb2.GetLineNumberClassificationsRequest.SerializeToString,
                response_deserializer=aiserver__pb2.GetLineNumberClassificationsResponse.FromString,
                _registered_method=True)


class RepositoryServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FastRepoInitHandshake(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SyncMerkleSubtree(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FastUpdateFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchRepositoryV2(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveRepositoryV2(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SemSearchFast(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SemSearch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnsureIndexCreated(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHighLevelFolderDescription(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEmbeddings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUploadLimits(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNumFilesToSend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAvailableChunkingStrategies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLineNumberClassifications(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RepositoryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FastRepoInitHandshake': grpc.unary_unary_rpc_method_handler(
                    servicer.FastRepoInitHandshake,
                    request_deserializer=aiserver__pb2.FastRepoInitHandshakeRequest.FromString,
                    response_serializer=aiserver__pb2.FastRepoInitHandshakeResponse.SerializeToString,
            ),
            'SyncMerkleSubtree': grpc.unary_unary_rpc_method_handler(
                    servicer.SyncMerkleSubtree,
                    request_deserializer=aiserver__pb2.SyncMerkleSubtreeRequest.FromString,
                    response_serializer=aiserver__pb2.SyncMerkleSubtreeResponse.SerializeToString,
            ),
            'FastUpdateFile': grpc.unary_unary_rpc_method_handler(
                    servicer.FastUpdateFile,
                    request_deserializer=aiserver__pb2.FastUpdateFileRequest.FromString,
                    response_serializer=aiserver__pb2.FastUpdateFileResponse.SerializeToString,
            ),
            'SearchRepositoryV2': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchRepositoryV2,
                    request_deserializer=aiserver__pb2.SearchRepositoryRequest.FromString,
                    response_serializer=aiserver__pb2.SearchRepositoryResponse.SerializeToString,
            ),
            'RemoveRepositoryV2': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveRepositoryV2,
                    request_deserializer=aiserver__pb2.RemoveRepositoryRequest.FromString,
                    response_serializer=aiserver__pb2.RemoveRepositoryResponse.SerializeToString,
            ),
            'SemSearchFast': grpc.unary_stream_rpc_method_handler(
                    servicer.SemSearchFast,
                    request_deserializer=aiserver__pb2.SemSearchRequest.FromString,
                    response_serializer=aiserver__pb2.SemSearchResponse.SerializeToString,
            ),
            'SemSearch': grpc.unary_stream_rpc_method_handler(
                    servicer.SemSearch,
                    request_deserializer=aiserver__pb2.SemSearchRequest.FromString,
                    response_serializer=aiserver__pb2.SemSearchResponse.SerializeToString,
            ),
            'EnsureIndexCreated': grpc.unary_unary_rpc_method_handler(
                    servicer.EnsureIndexCreated,
                    request_deserializer=aiserver__pb2.EnsureIndexCreatedRequest.FromString,
                    response_serializer=aiserver__pb2.EnsureIndexCreatedResponse.SerializeToString,
            ),
            'GetHighLevelFolderDescription': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHighLevelFolderDescription,
                    request_deserializer=aiserver__pb2.GetHighLevelFolderDescriptionRequest.FromString,
                    response_serializer=aiserver__pb2.GetHighLevelFolderDescriptionResponse.SerializeToString,
            ),
            'GetEmbeddings': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEmbeddings,
                    request_deserializer=aiserver__pb2.GetEmbeddingsRequest.FromString,
                    response_serializer=aiserver__pb2.GetEmbeddingsResponse.SerializeToString,
            ),
            'GetUploadLimits': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUploadLimits,
                    request_deserializer=aiserver__pb2.GetUploadLimitsRequest.FromString,
                    response_serializer=aiserver__pb2.GetUploadLimitsResponse.SerializeToString,
            ),
            'GetNumFilesToSend': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNumFilesToSend,
                    request_deserializer=aiserver__pb2.GetNumFilesToSendRequest.FromString,
                    response_serializer=aiserver__pb2.GetNumFilesToSendResponse.SerializeToString,
            ),
            'GetAvailableChunkingStrategies': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAvailableChunkingStrategies,
                    request_deserializer=aiserver__pb2.GetAvailableChunkingStrategiesRequest.FromString,
                    response_serializer=aiserver__pb2.GetAvailableChunkingStrategiesResponse.SerializeToString,
            ),
            'GetLineNumberClassifications': grpc.unary_stream_rpc_method_handler(
                    servicer.GetLineNumberClassifications,
                    request_deserializer=aiserver__pb2.GetLineNumberClassificationsRequest.FromString,
                    response_serializer=aiserver__pb2.GetLineNumberClassificationsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aiserver.v1.RepositoryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('aiserver.v1.RepositoryService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RepositoryService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FastRepoInitHandshake(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.RepositoryService/FastRepoInitHandshake',
            aiserver__pb2.FastRepoInitHandshakeRequest.SerializeToString,
            aiserver__pb2.FastRepoInitHandshakeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SyncMerkleSubtree(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.RepositoryService/SyncMerkleSubtree',
            aiserver__pb2.SyncMerkleSubtreeRequest.SerializeToString,
            aiserver__pb2.SyncMerkleSubtreeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FastUpdateFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.RepositoryService/FastUpdateFile',
            aiserver__pb2.FastUpdateFileRequest.SerializeToString,
            aiserver__pb2.FastUpdateFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchRepositoryV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.RepositoryService/SearchRepositoryV2',
            aiserver__pb2.SearchRepositoryRequest.SerializeToString,
            aiserver__pb2.SearchRepositoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveRepositoryV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.RepositoryService/RemoveRepositoryV2',
            aiserver__pb2.RemoveRepositoryRequest.SerializeToString,
            aiserver__pb2.RemoveRepositoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SemSearchFast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.RepositoryService/SemSearchFast',
            aiserver__pb2.SemSearchRequest.SerializeToString,
            aiserver__pb2.SemSearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SemSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.RepositoryService/SemSearch',
            aiserver__pb2.SemSearchRequest.SerializeToString,
            aiserver__pb2.SemSearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EnsureIndexCreated(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.RepositoryService/EnsureIndexCreated',
            aiserver__pb2.EnsureIndexCreatedRequest.SerializeToString,
            aiserver__pb2.EnsureIndexCreatedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHighLevelFolderDescription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.RepositoryService/GetHighLevelFolderDescription',
            aiserver__pb2.GetHighLevelFolderDescriptionRequest.SerializeToString,
            aiserver__pb2.GetHighLevelFolderDescriptionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEmbeddings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.RepositoryService/GetEmbeddings',
            aiserver__pb2.GetEmbeddingsRequest.SerializeToString,
            aiserver__pb2.GetEmbeddingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUploadLimits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.RepositoryService/GetUploadLimits',
            aiserver__pb2.GetUploadLimitsRequest.SerializeToString,
            aiserver__pb2.GetUploadLimitsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNumFilesToSend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.RepositoryService/GetNumFilesToSend',
            aiserver__pb2.GetNumFilesToSendRequest.SerializeToString,
            aiserver__pb2.GetNumFilesToSendResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAvailableChunkingStrategies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aiserver.v1.RepositoryService/GetAvailableChunkingStrategies',
            aiserver__pb2.GetAvailableChunkingStrategiesRequest.SerializeToString,
            aiserver__pb2.GetAvailableChunkingStrategiesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLineNumberClassifications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aiserver.v1.RepositoryService/GetLineNumberClassifications',
            aiserver__pb2.GetLineNumberClassificationsRequest.SerializeToString,
            aiserver__pb2.GetLineNumberClassificationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
